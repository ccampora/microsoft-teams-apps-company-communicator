{"version":3,"sources":["configVariables.ts","components/config.tsx","i18n.ts","apis/axiosJWTDecorator.ts","apis/messageListApi.ts","actions/index.ts","components/OverFlow/sentMessageOverflow.tsx","components/Messages/messages.tsx","components/OverFlow/draftMessageOverflow.tsx","components/DraftMessages/draftMessages.tsx","components/TabContainer/tabContainer.tsx","components/AdaptiveCard/adaptiveCard.ts","utility/imageutility.tsx","components/NewMessage/newMessage.tsx","components/StatusTaskModule/statusTaskModule.tsx","components/SendConfirmationTaskModule/sendConfirmationTaskModule.tsx","components/ErrorPage/errorPage.tsx","components/SignInPage/signInPage.tsx","components/SignInPage/signInSimpleStart.tsx","components/SignInPage/signInSimpleEnd.tsx","App.tsx","serviceWorker.ts","reducers/index.ts","index.tsx"],"names":["getBaseUrl","window","location","origin","Configuration","props","state","url","microsoftTeams","registerOnSaveHandler","saveEvent","setSettings","entityId","contentUrl","suggestedDisplayName","notifySuccess","setValidityState","className","React","Component","i18n","use","Backend","initReactI18next","init","fallbackLng","interpolation","escapeValue","formatDate","date","moment","format","formatDuration","startDate","endDate","result","difference","diff","totalDuration","duration","Math","floor","asHours","slice","utc","asMilliseconds","locale","formatNumber","number","search","URLSearchParams","get","Number","toLocaleString","axiosJWTDecoratorInstance","handleError","needAuthorizationHeader","config","this","setupAuthorizationHeader","axios","delete","data","post","put","error","hasOwnProperty","errorStatus","response","status","href","language","Promise","resolve","reject","authTokenRequest","successCallback","token","defaults","headers","failureCallback","console","resources","getAuthToken","baseAxiosUrl","getSentNotifications","a","getDraftNotifications","verifyGroupAccess","getGroups","id","searchGroups","query","exportNotification","payload","getSentNotification","getDraftNotification","deleteDraftNotification","duplicateDraftNotification","sendDraftNotification","updateDraftNotification","createDraftNotification","getTeams","getConsentSummaries","sendPreview","getAuthenticationConsentMetadata","windowLocationOriginDomain","login_hint","undefined","selectMessage","message","type","getMessagesList","dispatch","notificationList","forEach","notification","sendingStartedDate","sentDate","getDraftMessagesList","Overflow","localize","onOpenTaskModule","event","title","taskInfo","height","width","fallbackUrl","startTask","err","duplicateDraftMessage","t","menuOpen","items","key","icon","name","outline","active","indicator","menu","content","onClick","stopPropagation","setState","then","onMenuOpenChange","e","Menu","iconOnly","styles","overflowWithTranslation","withTranslation","connect","messagesList","Messages","interval","isOpenTaskModuleAllowed","processLabels","Flex","vAlign","fill","gap","Item","size","variables","grow","Text","truncated","weight","shrink","margin","renderSendingText","text","sentCount","succeeded","failed","unknown","totalMessageCount","messageContent","TooltipHost","calloutProps","gapSpace","Icon","xSpacing","escFunction","keyCode","submitTask","initializeIcons","loader","bind","document","addEventListener","setInterval","removeEventListener","clearInterval","nextProps","keyCount","label","outList","map","allMessages","Loader","length","List","selectable","messagesWithTranslation","deleteDraftMessage","teamsChannelId","teamsTeamId","context","teamId","channelId","draftNotificationId","catch","messages","draftMessagesList","selectedMessage","DraftMessages","itemsAccount","hAlign","allDraftMessages","draftMessagesWithTranslation","TabContainer","onNewMessage","panels","Button","primary","Accordion","defaultActiveIndex","tabContainerWithTranslation","getInitAdaptiveCard","setCardTitle","card","body","setCardImageLink","imageLink","setCardSummary","summary","setCardAuthor","author","setCardBtn","buttonTitle","buttonLink","actions","ImageUtil","makeInitialImage","canvas","createElement","style","display","appendChild","getContext","colorNum","ColorHash","hex","fillStyle","fillRect","font","split","len","first","initials","fillText","toUpperCase","toDataURL","removeChild","NewMessage","csvfilename","makeDropdownItems","resultedTeams","element","push","header","mail","image","team","makeDropdownItemList","fromItems","dropdownItemList","find","x","setDefaultCard","titleAsString","summaryAsString","authorAsString","buttonTitleAsString","imgUrl","getTeamList","teams","setGroupAccess","groupAccess","getGroupData","groups","getItem","draftMessageDetail","selectedRadioButton","rosters","allUsers","csvlist","teamsOptionSelected","selectedTeamsNum","rostersOptionSelected","selectedRostersNum","groupsOptionSelected","selectedGroupsNum","selectedRadioBtn","selectedTeams","selectedRosters","selectedGroups","btnLink","btnTitle","allUsersOptionSelected","updateCard","onGroupSelected","value","isSaveBtnDisabled","teamsSelectionIsValid","rostersSelectionIsValid","groupsSelectionIsValid","nothingSelected","isNextBtnDisabled","errorImageUrlMessage","errorButtonUrlMessage","getItems","remainingUserTeams","filter","findIndex","y","onTeamsChange","itemsData","MAX_SELECTED_TEAMS_NUM","onRostersChange","onGroupsChange","onGroupSearch","itemList","searchQuery","item","toLowerCase","indexOf","onGroupSearchQueryChange","noResultMessage","loading","encodeURIComponent","onSave","selctedRosters","draftMessage","messageId","csvlistOptionSelected","exists","editDraftMessage","postDraftMessage","onNext","page","onBack","onTitleChanged","showDefaultCard","target","onImageLinkChanged","startsWith","onSummaryChanged","onAuthorChanged","onBtnTitleChanged","onBtnLinkChanged","adaptiveCard","AdaptiveCards","parse","renderedCard","render","container","getElementsByClassName","firstChild","replaceWith","link","onExecuteAction","action","open","unstablePinned","params","match","placeholder","onChange","autoComplete","required","errorLabel","autoFocus","disabled","onSelected","Dropdown","hidden","multiple","onSelectedChange","noResultsMessage","unstable_pinned","loadingMessage","getGroupItems","onSearchQueryChange","accept","handleFileChange","secondary","currentTarget","files","log","persist","newMessageWithTranslation","StatusTaskModule","initMessage","sendingDuration","onClose","onExport","classList","remove","getItemList","media","Image","src","avatar","renderAudienceSelection","teamNames","rosterNames","groupNames","renderErrorMessage","errorMessage","renderWarningMessage","warningMessage","canDownload","labelPosition","sendingCompleted","StatusTaskModuleWithTranslation","SendConfirmationTaskModule","onSendMessage","sort","sendConfirmationTaskModuleWithTranslation","ErrorPage","useTranslation","parseErrorMessage","SignInPage","authenticate","reason","SignInSimpleStart","useEffect","replace","upn","assign","SignInSimpleEnd","hashParams","hash","substr","s","k","v","decodeURIComponent","getHashParameters","notifyFailure","App","setThemeComponent","theme","Provider","themes","teamsDark","getAppDom","teamsHighContrast","updateTheme","themeStyle","ThemeStyle","Dark","HighContrast","Light","baseFontSize","fallback","exact","path","component","forceUpdate","changeLanguage","updateLocale","Boolean","hostname","combineReducers","draftMessages","store","createStore","reducers","applyMiddleware","thunk","ReactDOM","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.6d6afc51.chunk.js","sourcesContent":["export const getBaseUrl = (): string => {\r\n    return window.location.origin;\r\n}\r\n","import React from 'react';\r\nimport * as microsoftTeams from \"@microsoft/teams-js\";\r\nimport { getBaseUrl } from '../configVariables';\r\n\r\nexport interface IConfigState {\r\n    url: string;\r\n}\r\n\r\nclass Configuration extends React.Component<{}, IConfigState> {\r\n    constructor(props: {}) {\r\n        super(props);\r\n        this.state = {\r\n            url: getBaseUrl() + \"/messages?locale={locale}\"\r\n        }\r\n    }\r\n\r\n    public componentDidMount() {\r\n        microsoftTeams.initialize();\r\n\r\n        microsoftTeams.settings.registerOnSaveHandler((saveEvent) => {\r\n            microsoftTeams.settings.setSettings({\r\n                entityId: \"Company_Communicator_App\",\r\n                contentUrl: this.state.url,\r\n                suggestedDisplayName: \"Company Communicator\",\r\n            });\r\n            saveEvent.notifySuccess();\r\n        });\r\n\r\n        microsoftTeams.settings.setValidityState(true);\r\n\r\n    }\r\n\r\n    public render(): JSX.Element {\r\n        return (\r\n            <div className=\"configContainer\">\r\n                <h3>Please click Save to get started.</h3>\r\n            </div>\r\n        );\r\n    }\r\n\r\n}\r\n\r\nexport default Configuration;\r\n","import i18n from 'i18next';\r\nimport { initReactI18next } from 'react-i18next';\r\nimport Backend from 'i18next-http-backend';\r\nimport moment from 'moment';\r\nimport 'moment/min/locales.min';\r\n\r\nexport const defaultLocale = () => {\r\n    return 'en-US';\r\n} \r\n\r\ni18n\r\n  // load translation using http -> see /public/locales (i.e. https://github.com/i18next/react-i18next/tree/master/example/react/public/locales)\r\n  // learn more: https://github.com/i18next/i18next-http-backend\r\n  .use(Backend)\r\n  // pass the i18n instance to react-i18next.\r\n  .use(initReactI18next)\r\n  // init i18next\r\n  // for all options read: https://www.i18next.com/overview/configuration-options\r\n    .init({\r\n    fallbackLng: defaultLocale(),\r\n    interpolation: {\r\n      escapeValue: false, // not needed for react as it escapes by default\r\n    }\r\n  });\r\n\r\nexport const updateLocale = () => {\r\n    const search = window.location.search;\r\n    const params = new URLSearchParams(search);\r\n    const locale = params.get(\"locale\") || defaultLocale();\r\n    i18n.changeLanguage(locale);\r\n    moment.locale(locale);\r\n};\r\n\r\nexport const formatDate = (date: string) => {\r\n    if (!date) return date;\r\n    return moment(date).format('l LT');\r\n}\r\n\r\nexport const formatDuration = (startDate: string, endDate: string) => {\r\n    let result = \"\";\r\n    if (startDate && endDate) {\r\n        const difference = moment(endDate).diff(moment(startDate));\r\n        const totalDuration = moment.duration(difference);\r\n        // Handling the scenario of duration being more than 24 hrs as it is not done by moment.js.\r\n        const hh = (\"0\" + Math.floor(totalDuration.asHours())).slice(-2);\r\n        result = hh + moment.utc(totalDuration.asMilliseconds()).locale(defaultLocale()).format(\":mm:ss\")\r\n    }\r\n    return result;\r\n}\r\n\r\nexport const formatNumber = (number: any) => {\r\n    const search = window.location.search;\r\n    const params = new URLSearchParams(search);\r\n    const locale = params.get(\"locale\") || defaultLocale();\r\n    return Number(number).toLocaleString(locale);\r\n}\r\n\r\nexport default i18n;","import axios, { AxiosResponse, AxiosRequestConfig } from \"axios\";\r\nimport * as microsoftTeams from \"@microsoft/teams-js\";\r\nimport i18n from '../i18n';\r\n\r\nexport class AxiosJWTDecorator {\r\n    public async get<T = any, R = AxiosResponse<T>>(\r\n        url: string,\r\n        handleError: boolean = true,\r\n        needAuthorizationHeader: boolean = true,\r\n        config?: AxiosRequestConfig,\r\n    ): Promise<R> {\r\n        try {\r\n            if (needAuthorizationHeader) {\r\n                config = await this.setupAuthorizationHeader(config);\r\n            }\r\n            return await axios.get(url, config);\r\n        } catch (error) {\r\n            if (handleError) {\r\n                this.handleError(error);\r\n                throw error;\r\n            }\r\n            else {\r\n                throw error;\r\n            }\r\n        }\r\n    }\r\n\r\n    public async delete<T = any, R = AxiosResponse<T>>(\r\n        url: string,\r\n        handleError: boolean = true,\r\n        config?: AxiosRequestConfig\r\n    ): Promise<R> {\r\n        try {\r\n            config = await this.setupAuthorizationHeader(config);\r\n            return await axios.delete(url, config);\r\n        } catch (error) {\r\n            if (handleError) {\r\n                this.handleError(error);\r\n                throw error;\r\n            }\r\n            else {\r\n                throw error;\r\n            }\r\n        }\r\n    }\r\n\r\n    public async post<T = any, R = AxiosResponse<T>>(\r\n        url: string,\r\n        data?: any,\r\n        handleError: boolean = true,\r\n        config?: AxiosRequestConfig\r\n    ): Promise<R> {\r\n        try {\r\n            config = await this.setupAuthorizationHeader(config);\r\n            return await axios.post(url, data, config);\r\n        } catch (error) {\r\n            if (handleError) {\r\n                this.handleError(error);\r\n                throw error;\r\n            }\r\n            else {\r\n                throw error;\r\n            }\r\n        }\r\n    }\r\n\r\n    public async put<T = any, R = AxiosResponse<T>>(\r\n        url: string,\r\n        data?: any,\r\n        handleError: boolean = true,\r\n        config?: AxiosRequestConfig\r\n    ): Promise<R> {\r\n        try {\r\n            config = await this.setupAuthorizationHeader(config);\r\n            return await axios.put(url, data, config);\r\n        } catch (error) {\r\n            if (handleError) {\r\n                this.handleError(error);\r\n                throw error;\r\n            }\r\n            else {\r\n                throw error;\r\n            }\r\n        }\r\n    }\r\n\r\n  private handleError(error: any): void {\r\n    if (error.hasOwnProperty(\"response\")) {\r\n      const errorStatus = error.response.status;\r\n      if (errorStatus === 403) {\r\n        window.location.href = `/errorpage/403?locale=${i18n.language}`;\r\n      } else if (errorStatus === 401) {\r\n        window.location.href = `/errorpage/401?locale=${i18n.language}`;\r\n      } else {\r\n        window.location.href = `/errorpage?locale=${i18n.language}`;\r\n      }\r\n    } else {\r\n      window.location.href = `/errorpage?locale=${i18n.language}`;\r\n    }\r\n  }\r\n\r\n    private async setupAuthorizationHeader(\r\n        config?: AxiosRequestConfig\r\n    ): Promise<AxiosRequestConfig> {\r\n        microsoftTeams.initialize();\r\n\r\n    return new Promise<AxiosRequestConfig>((resolve, reject) => {\r\n      const authTokenRequest = {\r\n        successCallback: (token: string) => {\r\n          if (!config) {\r\n            config = axios.defaults;\r\n          }\r\n          config.headers[\"Authorization\"] = `Bearer ${token}`;\r\n          config.headers[\"Accept-Language\"] = i18n.language;\r\n          resolve(config);\r\n        },\r\n        failureCallback: (error: string) => {\r\n          // When the getAuthToken function returns a \"resourceRequiresConsent\" error, \r\n          // it means Azure AD needs the user's consent before issuing a token to the app. \r\n          // The following code redirects the user to the \"Sign in\" page where the user can grant the consent. \r\n          // Right now, the app redirects to the consent page for any error.\r\n          console.error(\"Error from getAuthToken: \", error);\r\n          window.location.href = `/signin?locale=${i18n.language}`;\r\n        },\r\n        resources: []\r\n      };\r\n      microsoftTeams.authentication.getAuthToken(authTokenRequest);\r\n    });\r\n  }\r\n}\r\n\r\nconst axiosJWTDecoratorInstance = new AxiosJWTDecorator();\r\nexport default axiosJWTDecoratorInstance;","import axios from './axiosJWTDecorator';\r\nimport { getBaseUrl } from '../configVariables';\r\n\r\nlet baseAxiosUrl = getBaseUrl() + '/api';\r\n\r\nexport const getSentNotifications = async (): Promise<any> => {\r\n    let url = baseAxiosUrl + \"/sentnotifications\";\r\n    return await axios.get(url);\r\n}\r\n\r\nexport const getDraftNotifications = async (): Promise<any> => {\r\n    let url = baseAxiosUrl + \"/draftnotifications\";\r\n    return await axios.get(url);\r\n}\r\n\r\nexport const verifyGroupAccess = async (): Promise<any> => {\r\n    let url = baseAxiosUrl + \"/groupdata/verifyaccess\";\r\n    return await axios.get(url, false);\r\n}\r\n\r\nexport const getGroups = async (id: number): Promise<any> => {\r\n    let url = baseAxiosUrl + \"/groupdata/\" + id;\r\n    return await axios.get(url);\r\n}\r\n\r\nexport const searchGroups = async (query: string): Promise<any> => {\r\n    let url = baseAxiosUrl + \"/groupdata/search/\" + query;\r\n    return await axios.get(url);\r\n}\r\n\r\nexport const exportNotification = async(payload: {}): Promise<any> => {\r\n    let url = baseAxiosUrl + \"/exportnotification/export\";\r\n    return await axios.put(url, payload);\r\n}\r\n\r\nexport const getSentNotification = async (id: number): Promise<any> => {\r\n    let url = baseAxiosUrl + \"/sentnotifications/\" + id;\r\n    return await axios.get(url);\r\n}\r\n\r\nexport const getDraftNotification = async (id: number): Promise<any> => {\r\n    let url = baseAxiosUrl + \"/draftnotifications/\" + id;\r\n    return await axios.get(url);\r\n}\r\n\r\n\r\nexport const deleteDraftNotification = async (id: number): Promise<any> => {\r\n    let url = baseAxiosUrl + \"/draftnotifications/\" + id;\r\n    return await axios.delete(url);\r\n}\r\n\r\nexport const duplicateDraftNotification = async (id: number): Promise<any> => {\r\n    let url = baseAxiosUrl + \"/draftnotifications/duplicates/\" + id;\r\n    return await axios.post(url);\r\n}\r\n\r\nexport const sendDraftNotification = async (payload: {}): Promise<any> => {\r\n    let url = baseAxiosUrl + \"/sentnotifications\";\r\n    return await axios.post(url, payload);\r\n}\r\n\r\nexport const updateDraftNotification = async (payload: {}): Promise<any> => {\r\n    let url = baseAxiosUrl + \"/draftnotifications\";\r\n    return await axios.put(url, payload);\r\n}\r\n\r\nexport const createDraftNotification = async (payload: {}): Promise<any> => {\r\n    let url = baseAxiosUrl + \"/draftnotifications\";\r\n    return await axios.post(url, payload);\r\n}\r\n\r\nexport const getTeams = async (): Promise<any> => {\r\n    let url = baseAxiosUrl + \"/teamdata\";\r\n    return await axios.get(url);\r\n}\r\n\r\nexport const getConsentSummaries = async (id: number): Promise<any> => {\r\n    let url = baseAxiosUrl + \"/draftnotifications/consentSummaries/\" + id;\r\n    return await axios.get(url);\r\n}\r\n\r\nexport const sendPreview = async (payload: {}): Promise<any> => {\r\n    let url = baseAxiosUrl + \"/draftnotifications/previews\";\r\n    return await axios.post(url, payload);\r\n}\r\n\r\nexport const getAuthenticationConsentMetadata = async (windowLocationOriginDomain: string, login_hint: string): Promise<any> => {\r\n    let url = `${baseAxiosUrl}/authenticationMetadata/consentUrl?windowLocationOriginDomain=${windowLocationOriginDomain}&loginhint=${login_hint}`;\r\n    return await axios.get(url, undefined, false);\r\n}\r\n","import { formatDate } from '../i18n';\r\nimport { getSentNotifications, getDraftNotifications } from '../apis/messageListApi';\r\n\r\ntype Notification = {\r\n    createdDateTime: string,\r\n    failed: number,\r\n    id: string,\r\n    isCompleted: boolean,\r\n    sentDate: string,\r\n    sendingStartedDate: string,\r\n    sendingDuration: string,\r\n    succeeded: number,\r\n    throttled: number,\r\n    title: string,\r\n    totalMessageCount: number,\r\n}\r\n\r\nexport const selectMessage = (message: any) => {\r\n    return {\r\n        type: 'MESSAGE_SELECTED',\r\n        payload: message\r\n    };\r\n};\r\n\r\nexport const getMessagesList = () => async (dispatch: any) => {\r\n    const response = await getSentNotifications();\r\n    const notificationList: Notification[] = response.data;\r\n    notificationList.forEach(notification => {\r\n        notification.sendingStartedDate = formatDate(notification.sendingStartedDate);\r\n        notification.sentDate = formatDate(notification.sentDate);\r\n    });\r\n    dispatch({ type: 'FETCH_MESSAGES', payload: notificationList });\r\n};\r\n\r\nexport const getDraftMessagesList = () => async (dispatch: any) => {\r\n    const response = await getDraftNotifications();\r\n    dispatch({ type: 'FETCH_DRAFTMESSAGES', payload: response.data });\r\n};","import React from 'react';\r\nimport { connect } from 'react-redux';\r\nimport { withTranslation, WithTranslation } from \"react-i18next\";\r\nimport { Menu } from '@stardust-ui/react';\r\nimport { getBaseUrl } from '../../configVariables';\r\nimport * as microsoftTeams from \"@microsoft/teams-js\";\r\nimport { duplicateDraftNotification } from '../../apis/messageListApi';\r\nimport { selectMessage, getMessagesList, getDraftMessagesList } from '../../actions';\r\nimport { TFunction } from \"i18next\";\r\n\r\nexport interface OverflowProps extends WithTranslation {\r\n    message?: any;\r\n    styles?: object;\r\n    title?: string;\r\n    selectMessage?: any;\r\n    getMessagesList?: any;\r\n    getDraftMessagesList?: any;\r\n}\r\n\r\nexport interface OverflowState {\r\n    menuOpen: boolean;\r\n}\r\n\r\nexport interface ITaskInfo {\r\n    title?: string;\r\n    height?: number;\r\n    width?: number;\r\n    url?: string;\r\n    card?: string;\r\n    fallbackUrl?: string;\r\n    completionBotId?: string;\r\n}\r\n\r\nclass Overflow extends React.Component<OverflowProps, OverflowState> {\r\n    readonly localize: TFunction;\r\n    constructor(props: OverflowProps) {\r\n        super(props);\r\n        this.localize = this.props.t;\r\n        this.state = {\r\n            menuOpen: false,\r\n        };\r\n    }\r\n\r\n    public componentDidMount() {\r\n        microsoftTeams.initialize();\r\n    }\r\n\r\n    public render(): JSX.Element {\r\n        const items = [\r\n            {\r\n                key: 'more',\r\n                icon: {\r\n                    name: 'more',\r\n                    outline: true,\r\n                },\r\n                menuOpen: this.state.menuOpen,\r\n                active: this.state.menuOpen,\r\n                indicator: false,\r\n                menu: {\r\n                    items: [\r\n                        {\r\n                            key: 'status',\r\n                            content: this.localize(\"ViewStatus\"),\r\n                            onClick: (event: any) => {\r\n                                event.stopPropagation();\r\n                                this.setState({\r\n                                    menuOpen: false,\r\n                                });\r\n                                let url = getBaseUrl() + \"/viewstatus/\" + this.props.message.id + \"?locale={locale}\";\r\n                                this.onOpenTaskModule(null, url, this.localize(\"ViewStatus\"));\r\n                            }\r\n                        },\r\n                        {\r\n                            key: 'duplicate',\r\n                            content: this.localize(\"Duplicate\"),\r\n                            onClick: (event: any) => {\r\n                                event.stopPropagation();\r\n                                this.setState({\r\n                                    menuOpen: false,\r\n                                });\r\n                                this.duplicateDraftMessage(this.props.message.id).then(() => {\r\n                                    this.props.getDraftMessagesList();\r\n                                });\r\n                            }\r\n                        },\r\n                    ],\r\n                },\r\n                onMenuOpenChange: (e: any, { menuOpen }: any) => {\r\n                    this.setState({\r\n                        menuOpen: !this.state.menuOpen\r\n                    });\r\n                },\r\n            },\r\n        ];\r\n\r\n        return <Menu className=\"menuContainer\" iconOnly items={items} styles={this.props.styles} title={this.props.title} />;\r\n    }\r\n\r\n    private onOpenTaskModule = (event: any, url: string, title: string) => {\r\n        let taskInfo: ITaskInfo = {\r\n            url: url,\r\n            title: title,\r\n            height: 530,\r\n            width: 1000,\r\n            fallbackUrl: url,\r\n        };\r\n        let submitHandler = (err: any, result: any) => {\r\n        };\r\n        microsoftTeams.tasks.startTask(taskInfo, submitHandler);\r\n    }\r\n\r\n    private duplicateDraftMessage = async (id: number) => {\r\n        try {\r\n            await duplicateDraftNotification(id);\r\n        } catch (error) {\r\n            return error;\r\n        }\r\n    }\r\n}\r\n\r\nconst mapStateToProps = (state: any) => {\r\n    return { messagesList: state.messagesList };\r\n}\r\n\r\nconst overflowWithTranslation = withTranslation()(Overflow);\r\nexport default connect(mapStateToProps, { selectMessage, getMessagesList, getDraftMessagesList })(overflowWithTranslation);\r\n","import * as React from 'react';\r\nimport { connect } from 'react-redux';\r\nimport { withTranslation, WithTranslation } from \"react-i18next\";\r\nimport { TooltipHost } from 'office-ui-fabric-react';\r\nimport { initializeIcons } from 'office-ui-fabric-react/lib/Icons';\r\nimport { Icon, Loader, List, Flex, Text } from '@stardust-ui/react';\r\nimport * as microsoftTeams from \"@microsoft/teams-js\";\r\n\r\nimport { selectMessage, getMessagesList, getDraftMessagesList } from '../../actions';\r\nimport { getBaseUrl } from '../../configVariables';\r\nimport Overflow from '../OverFlow/sentMessageOverflow';\r\nimport './messages.scss';\r\nimport { TFunction } from \"i18next\";\r\nimport { formatNumber } from '../../i18n';\r\n\r\nexport interface ITaskInfo {\r\n  title?: string;\r\n  height?: number;\r\n  width?: number;\r\n  url?: string;\r\n  card?: string;\r\n  fallbackUrl?: string;\r\n  completionBotId?: string;\r\n}\r\n\r\nexport interface IMessage {\r\n  title: string;\r\n  sentDate: string;\r\n  recipients: string;\r\n  acknowledgements?: string;\r\n  reactions?: string;\r\n  responses?: string;\r\n}\r\n\r\nexport interface IMessageProps extends WithTranslation {\r\n  messagesList: IMessage[];\r\n  selectMessage?: any;\r\n  getMessagesList?: any;\r\n  getDraftMessagesList?: any;\r\n}\r\n\r\nexport interface IMessageState {\r\n  message: IMessage[];\r\n  loader: boolean;\r\n}\r\n\r\nclass Messages extends React.Component<IMessageProps, IMessageState> {\r\n  readonly localize: TFunction;\r\n  private interval: any;\r\n  private isOpenTaskModuleAllowed: boolean;\r\n  constructor(props: IMessageProps) {\r\n    super(props);\r\n    initializeIcons();\r\n    this.localize = this.props.t;\r\n    this.isOpenTaskModuleAllowed = true;\r\n    this.state = {\r\n      message: this.props.messagesList,\r\n      loader: true,\r\n    };\r\n    this.escFunction = this.escFunction.bind(this);\r\n  }\r\n\r\n  public componentDidMount() {\r\n    microsoftTeams.initialize();\r\n    this.props.getMessagesList();\r\n    document.addEventListener(\"keydown\", this.escFunction, false);\r\n    this.interval = setInterval(() => {\r\n      this.props.getMessagesList();\r\n    }, 60000);\r\n  }\r\n\r\n  public componentWillUnmount() {\r\n    document.removeEventListener(\"keydown\", this.escFunction, false);\r\n    clearInterval(this.interval);\r\n  }\r\n\r\n  public componentWillReceiveProps(nextProps: any) {\r\n    if (this.props !== nextProps) {\r\n      this.setState({\r\n        message: nextProps.messagesList,\r\n        loader: false\r\n      });\r\n    }\r\n  }\r\n\r\n  public render(): JSX.Element {\r\n    let keyCount = 0;\r\n      const processItem = (message: any) => {\r\n      keyCount++;\r\n      const out = {\r\n        key: keyCount,\r\n        content: this.messageContent(message),\r\n        onClick: (): void => {\r\n            let url = getBaseUrl() + \"/viewstatus/\" + message.id + \"?locale={locale}\";\r\n            this.onOpenTaskModule(null, url, this.localize(\"ViewStatus\"));\r\n        },\r\n        styles: { margin: '0.2rem 0.2rem 0 0' },\r\n      };\r\n      return out;\r\n    };\r\n\r\n    const label = this.processLabels();\r\n    const outList = this.state.message.map(processItem);\r\n    const allMessages = [...label, ...outList];\r\n\r\n    if (this.state.loader) {\r\n      return (\r\n        <Loader />\r\n      );\r\n    } else if (this.state.message.length === 0) {\r\n        return (<div className=\"results\">{this.localize(\"EmptySentMessages\")}</div>);\r\n    }\r\n    else {\r\n      return (\r\n        <List selectable items={allMessages} className=\"list\" />\r\n      );\r\n    }\r\n  }\r\n\r\n  private processLabels = () => {\r\n    const out = [{\r\n      key: \"labels\",\r\n      content: (\r\n        <Flex vAlign=\"center\" fill gap=\"gap.small\">\r\n          <Flex.Item size=\"size.quarter\" variables={{ 'size.quarter': '24%' }} grow={1} >\r\n            <Text\r\n              truncated\r\n              weight=\"bold\"\r\n              content={this.localize(\"TitleText\")}\r\n            >\r\n            </Text>\r\n          </Flex.Item>\r\n          <Flex.Item size=\"size.quarter\" variables={{ 'size.quarter': '24%' }}>\r\n            <Text></Text>\r\n          </Flex.Item>\r\n          <Flex.Item size=\"size.quarter\" variables={{ 'size.quarter': '24%' }} shrink={false}>\r\n            <Text\r\n              truncated\r\n              content={this.localize(\"Recipients\")}\r\n              weight=\"bold\"\r\n            >\r\n            </Text>\r\n          </Flex.Item>\r\n          <Flex.Item size=\"size.quarter\" variables={{ 'size.quarter': '24%' }} >\r\n            <Text\r\n              truncated\r\n              content={this.localize(\"Sent\")}\r\n              weight=\"bold\"\r\n            >\r\n            </Text>\r\n          </Flex.Item>\r\n          <Flex.Item shrink={0} >\r\n            <Overflow title=\"\" />\r\n          </Flex.Item>\r\n        </Flex>\r\n      ),\r\n      styles: { margin: '0.2rem 0.2rem 0 0' },\r\n    }];\r\n    return out;\r\n  }\r\n\r\n  private renderSendingText = (message: any) => {\r\n    var text = \"\";\r\n    switch (message.status) {\r\n        case \"Queued\":\r\n            text = this.localize(\"Queued\");\r\n            break;\r\n        case \"SyncingRecipients\":\r\n            text = this.localize(\"SyncingRecipients\");\r\n            break;\r\n        case \"InstallingApp\":\r\n            text = this.localize(\"InstallingApp\");\r\n            break;\r\n        case \"Sending\":\r\n            let sentCount =\r\n                (message.succeeded ? message.succeeded : 0) +\r\n                (message.failed ? message.failed : 0) +\r\n                (message.unknown ? message.unknown : 0);\r\n\r\n            text = this.localize(\"SendingMessages\", { \"SentCount\": formatNumber(sentCount), \"TotalCount\": formatNumber(message.totalMessageCount) });\r\n            break;\r\n        case \"Sent\":\r\n        case \"Failed\":\r\n            text = \"\";\r\n    }\r\n\r\n    return (<Text truncated content={text} />);\r\n  }\r\n\r\n  private messageContent = (message: any) => {\r\n    return (\r\n      <Flex className=\"listContainer\" vAlign=\"center\" fill gap=\"gap.small\">\r\n        <Flex.Item size=\"size.quarter\" variables={{ 'size.quarter': '24%' }} grow={1}>\r\n          <Text\r\n            truncated\r\n            content={message.title}\r\n          >\r\n          </Text>\r\n        </Flex.Item>\r\n        <Flex.Item size=\"size.quarter\" variables={{ 'size.quarter': '24%' }}>\r\n          {this.renderSendingText(message)}\r\n        </Flex.Item>\r\n        <Flex.Item size=\"size.quarter\" variables={{ 'size.quarter': '24%' }} shrink={false}>\r\n          <div>\r\n            <TooltipHost content={this.props.t(\"TooltipSuccess\")} calloutProps={{ gapSpace: 0 }}>\r\n              <Icon name=\"stardust-checkmark\" xSpacing=\"after\" className=\"succeeded\" outline />\r\n              <span className=\"semiBold\">{formatNumber(message.succeeded)}</span>\r\n            </TooltipHost>\r\n            <TooltipHost content={this.props.t(\"TooltipFailure\")} calloutProps={{ gapSpace: 0 }}>\r\n              <Icon name=\"stardust-close\" xSpacing=\"both\" className=\"failed\" outline />\r\n                        <span className=\"semiBold\">{formatNumber(message.failed)}</span>\r\n            </TooltipHost>\r\n            {\r\n              message.unknown && \r\n              <TooltipHost content=\"Unknown\" calloutProps={{ gapSpace: 0 }}>\r\n                <Icon name=\"exclamation-circle\" xSpacing=\"both\" className=\"unknown\" outline />\r\n                            <span className=\"semiBold\">{formatNumber(message.unknown)}</span>\r\n              </TooltipHost>\r\n            }\r\n          </div>\r\n        </Flex.Item>\r\n        <Flex.Item size=\"size.quarter\" variables={{ 'size.quarter': '24%' }} >\r\n          <Text\r\n            truncated\r\n            className=\"semiBold\"\r\n            content={message.sentDate}\r\n          />\r\n        </Flex.Item>\r\n        <Flex.Item shrink={0}>\r\n          <Overflow message={message} title=\"\" />\r\n        </Flex.Item>\r\n      </Flex>\r\n    );\r\n  }\r\n\r\n  private escFunction = (event: any) => {\r\n    if (event.keyCode === 27 || (event.key === \"Escape\")) {\r\n      microsoftTeams.tasks.submitTask();\r\n    }\r\n  }\r\n\r\n  public onOpenTaskModule = (event: any, url: string, title: string) => {\r\n    if (this.isOpenTaskModuleAllowed) {\r\n      this.isOpenTaskModuleAllowed = false;\r\n      let taskInfo: ITaskInfo = {\r\n        url: url,\r\n        title: title,\r\n        height: 530,\r\n        width: 1000,\r\n        fallbackUrl: url,\r\n      }\r\n\r\n      let submitHandler = (err: any, result: any) => {\r\n        this.isOpenTaskModuleAllowed = true;\r\n      };\r\n\r\n      microsoftTeams.tasks.startTask(taskInfo, submitHandler);\r\n    }\r\n  }\r\n}\r\n\r\nconst mapStateToProps = (state: any) => {\r\n  return { messagesList: state.messagesList };\r\n}\r\n\r\nconst messagesWithTranslation = withTranslation()(Messages);\r\nexport default connect(mapStateToProps, { selectMessage, getMessagesList, getDraftMessagesList })(messagesWithTranslation);","import React from 'react';\r\nimport { connect } from 'react-redux';\r\nimport { withTranslation, WithTranslation } from \"react-i18next\";\r\nimport { Menu } from '@stardust-ui/react';\r\nimport * as microsoftTeams from \"@microsoft/teams-js\";\r\n\r\nimport { getBaseUrl } from '../../configVariables';\r\nimport { selectMessage, getMessagesList, getDraftMessagesList } from '../../actions';\r\nimport { deleteDraftNotification, duplicateDraftNotification, sendPreview } from '../../apis/messageListApi';\r\nimport { TFunction } from \"i18next\";\r\n\r\nexport interface OverflowProps extends WithTranslation {\r\n    message: any;\r\n    styles?: object;\r\n    title?: string;\r\n    selectMessage?: any;\r\n    getMessagesList?: any;\r\n    getDraftMessagesList?: any;\r\n}\r\n\r\nexport interface OverflowState {\r\n    teamsTeamId?: string;\r\n    teamsChannelId?: string;\r\n    menuOpen: boolean;\r\n}\r\n\r\nexport interface ITaskInfo {\r\n    title?: string;\r\n    height?: number;\r\n    width?: number;\r\n    url?: string;\r\n    card?: string;\r\n    fallbackUrl?: string;\r\n    completionBotId?: string;\r\n}\r\n\r\nclass Overflow extends React.Component<OverflowProps, OverflowState> {\r\n    readonly localize: TFunction;\r\n    constructor(props: OverflowProps) {\r\n        super(props);\r\n        this.localize = this.props.t;\r\n        this.state = {\r\n            teamsChannelId: '',\r\n            teamsTeamId: '',\r\n            menuOpen: false,\r\n        };\r\n    }\r\n\r\n    public componentDidMount() {\r\n        microsoftTeams.initialize();\r\n        microsoftTeams.getContext((context) => {\r\n            this.setState({\r\n                teamsTeamId: context.teamId,\r\n                teamsChannelId: context.channelId,\r\n            });\r\n        });\r\n    }\r\n\r\n    public render(): JSX.Element {\r\n        const items = [\r\n            {\r\n                key: 'more',\r\n                icon: {\r\n                    name: 'more',\r\n                    outline: true,\r\n                },\r\n                menuOpen: this.state.menuOpen,\r\n                active: this.state.menuOpen,\r\n                indicator: false,\r\n                menu: {\r\n                    items: [\r\n                        {\r\n                            key: 'send',\r\n                            content: this.localize(\"Send\"),\r\n                            onClick: (event: any) => {\r\n                                event.stopPropagation();\r\n                                this.setState({\r\n                                    menuOpen: false,\r\n                                });\r\n                                let url = getBaseUrl() + \"/sendconfirmation/\" + this.props.message.id + \"?locale={locale}\";\r\n                                this.onOpenTaskModule(null, url, this.localize(\"SendConfirmation\"));\r\n                            }\r\n                        },\r\n                        {\r\n                            key: 'preview',\r\n                            content: this.localize(\"PreviewInThisChannel\"),\r\n                            onClick: (event: any) => {\r\n                                event.stopPropagation();\r\n                                this.setState({\r\n                                    menuOpen: false,\r\n                                });\r\n                                let payload = {\r\n                                    draftNotificationId: this.props.message.id,\r\n                                    teamsTeamId: this.state.teamsTeamId,\r\n                                    teamsChannelId: this.state.teamsChannelId,\r\n                                }\r\n                                sendPreview(payload).then((response) => {\r\n                                    return response.status;\r\n                                }).catch((error) => {\r\n                                    return error;\r\n                                });\r\n                            }\r\n                        },\r\n                        {\r\n                            key: 'edit',\r\n                            content: this.localize(\"Edit\"),\r\n                            onClick: (event: any) => {\r\n                                event.stopPropagation();\r\n                                this.setState({\r\n                                    menuOpen: false,\r\n                                });\r\n                                let url = getBaseUrl() + \"/newmessage/\" + this.props.message.id + \"?locale={locale}\";\r\n                                this.onOpenTaskModule(null, url, this.localize(\"EditMessage\"));\r\n                            }\r\n                        },\r\n                        {\r\n                            key: 'duplicate',\r\n                            content: this.localize(\"Duplicate\"),\r\n                            onClick: (event: any) => {\r\n                                event.stopPropagation();\r\n                                this.setState({\r\n                                    menuOpen: false,\r\n                                });\r\n                                this.duplicateDraftMessage(this.props.message.id).then(() => {\r\n                                    this.props.getDraftMessagesList();\r\n                                });\r\n                            }\r\n                        },\r\n                        {\r\n                            key: 'delete',\r\n                            content: this.localize(\"Delete\"),\r\n                            onClick: (event: any) => {\r\n                                event.stopPropagation();\r\n                                this.setState({\r\n                                    menuOpen: false,\r\n                                });\r\n                                this.deleteDraftMessage(this.props.message.id).then(() => {\r\n                                    this.props.getDraftMessagesList();\r\n                                });\r\n                            }\r\n                        },\r\n                    ],\r\n                },\r\n                onMenuOpenChange: (e: any, { menuOpen }: any) => {\r\n                    this.setState({\r\n                        menuOpen: !this.state.menuOpen\r\n                    });\r\n                },\r\n            },\r\n        ];\r\n\r\n        return <Menu className=\"menuContainer\" iconOnly items={items} styles={this.props.styles} title={this.props.title} />;\r\n    }\r\n\r\n    private onOpenTaskModule = (event: any, url: string, title: string) => {\r\n        let taskInfo: ITaskInfo = {\r\n            url: url,\r\n            title: title,\r\n            height: 530,\r\n            width: 1000,\r\n            fallbackUrl: url,\r\n        };\r\n\r\n        let submitHandler = (err: any, result: any) => {\r\n            this.props.getDraftMessagesList().then(() => {\r\n                this.props.getMessagesList();\r\n            });\r\n        };\r\n\r\n        microsoftTeams.tasks.startTask(taskInfo, submitHandler);\r\n    }\r\n\r\n    private duplicateDraftMessage = async (id: number) => {\r\n        try {\r\n            await duplicateDraftNotification(id);\r\n        } catch (error) {\r\n            return error;\r\n        }\r\n    }\r\n\r\n    private deleteDraftMessage = async (id: number) => {\r\n        try {\r\n            await deleteDraftNotification(id);\r\n        } catch (error) {\r\n            return error;\r\n        }\r\n    }\r\n}\r\n\r\nconst mapStateToProps = (state: any) => {\r\n    return { messages: state.draftMessagesList, selectedMessage: state.selectedMessage };\r\n}\r\n\r\nconst overflowWithTranslation = withTranslation()(Overflow);\r\nexport default connect(mapStateToProps, { selectMessage, getDraftMessagesList, getMessagesList })(overflowWithTranslation);\r\n","import * as React from 'react';\r\nimport { connect } from 'react-redux';\r\nimport { withTranslation, WithTranslation } from \"react-i18next\";\r\nimport { initializeIcons } from 'office-ui-fabric-react/lib/Icons';\r\nimport { Loader, List, Flex, Text } from '@stardust-ui/react';\r\nimport * as microsoftTeams from \"@microsoft/teams-js\";\r\n\r\nimport './draftMessages.scss';\r\nimport { selectMessage, getDraftMessagesList, getMessagesList } from '../../actions';\r\nimport { getBaseUrl } from '../../configVariables';\r\nimport Overflow from '../OverFlow/draftMessageOverflow';\r\nimport { TFunction } from \"i18next\";\r\n\r\nexport interface ITaskInfo {\r\n  title?: string;\r\n  height?: number;\r\n  width?: number;\r\n  url?: string;\r\n  card?: string;\r\n  fallbackUrl?: string;\r\n  completionBotId?: string;\r\n}\r\n\r\nexport interface IMessage {\r\n  id: string;\r\n  title: string;\r\n  date: string;\r\n  recipients: string;\r\n  acknowledgements?: string;\r\n  reactions?: string;\r\n  responses?: string;\r\n}\r\n\r\nexport interface IMessageProps extends WithTranslation {\r\n  messages: IMessage[];\r\n  selectedMessage: any;\r\n  selectMessage?: any;\r\n  getDraftMessagesList?: any;\r\n  getMessagesList?: any;\r\n}\r\n\r\nexport interface IMessageState {\r\n  message: IMessage[];\r\n  itemsAccount: number;\r\n  loader: boolean;\r\n  teamsTeamId?: string;\r\n  teamsChannelId?: string;\r\n}\r\n\r\nclass DraftMessages extends React.Component<IMessageProps, IMessageState> {\r\n  readonly localize: TFunction;\r\n  private interval: any;\r\n  private isOpenTaskModuleAllowed: boolean;\r\n\r\n  constructor(props: IMessageProps) {\r\n    super(props);\r\n    initializeIcons();\r\n    this.localize = this.props.t;\r\n    this.isOpenTaskModuleAllowed = true;\r\n    this.state = {\r\n      message: props.messages,\r\n      itemsAccount: this.props.messages.length,\r\n      loader: true,\r\n      teamsTeamId: \"\",\r\n      teamsChannelId: \"\",\r\n    };\r\n  }\r\n\r\n  public componentDidMount() {\r\n    microsoftTeams.initialize();\r\n    microsoftTeams.getContext((context) => {\r\n      this.setState({\r\n        teamsTeamId: context.teamId,\r\n        teamsChannelId: context.channelId,\r\n      });\r\n    });\r\n    this.props.getDraftMessagesList();\r\n    this.interval = setInterval(() => {\r\n      this.props.getDraftMessagesList();\r\n    }, 60000);\r\n  }\r\n\r\n  public componentWillReceiveProps(nextProps: any) {\r\n    this.setState({\r\n      message: nextProps.messages,\r\n      loader: false\r\n    })\r\n  }\r\n\r\n  public componentWillUnmount() {\r\n    clearInterval(this.interval);\r\n  }\r\n\r\n  public render(): JSX.Element {\r\n    let keyCount = 0;\r\n    const processItem = (message: any) => {\r\n      keyCount++;\r\n      const out = {\r\n        key: keyCount,\r\n        content: (\r\n          <Flex vAlign=\"center\" fill gap=\"gap.small\">\r\n            <Flex.Item shrink={0} grow={1}>\r\n              <Text>{message.title}</Text>\r\n            </Flex.Item>\r\n            <Flex.Item shrink={0} hAlign=\"end\" vAlign=\"center\">\r\n              <Overflow message={message} title=\"\" />\r\n            </Flex.Item>\r\n          </Flex>\r\n        ),\r\n        styles: { margin: '0.2rem 0.2rem 0 0' },\r\n        onClick: (): void => {\r\n            let url = getBaseUrl() + \"/newmessage/\" + message.id + \"?locale={locale}\";\r\n            this.onOpenTaskModule(null, url, this.localize(\"EditMessage\"));\r\n        },\r\n      };\r\n      return out;\r\n    };\r\n\r\n    const label = this.processLabels();\r\n    const outList = this.state.message.map(processItem);\r\n    const allDraftMessages = [...label, ...outList];\r\n\r\n    if (this.state.loader) {\r\n      return (\r\n        <Loader />\r\n      );\r\n    } else if (this.state.message.length === 0) {\r\n        return (<div className=\"results\">{this.localize(\"EmptyDraftMessages\")}</div>);\r\n    }\r\n    else {\r\n      return (\r\n        <List selectable items={allDraftMessages} className=\"list\" />\r\n      );\r\n    }\r\n  }\r\n\r\n  private processLabels = () => {\r\n    const out = [{\r\n      key: \"labels\",\r\n      content: (\r\n        <Flex vAlign=\"center\" fill gap=\"gap.small\">\r\n          <Flex.Item>\r\n            <Text\r\n              truncated\r\n              weight=\"bold\"\r\n              content={this.localize(\"TitleText\")}\r\n            >\r\n            </Text>\r\n          </Flex.Item>\r\n        </Flex>\r\n      ),\r\n      styles: { margin: '0.2rem 0.2rem 0 0' },\r\n    }];\r\n    return out;\r\n  }\r\n\r\n  private onOpenTaskModule = (event: any, url: string, title: string) => {\r\n    if (this.isOpenTaskModuleAllowed) {\r\n      this.isOpenTaskModuleAllowed = false;\r\n      let taskInfo: ITaskInfo = {\r\n        url: url,\r\n        title: title,\r\n        height: 530,\r\n        width: 1000,\r\n        fallbackUrl: url,\r\n      }\r\n\r\n      let submitHandler = (err: any, result: any) => {\r\n        this.props.getDraftMessagesList().then(() => {\r\n          this.props.getMessagesList();\r\n          this.isOpenTaskModuleAllowed = true;\r\n        });\r\n      };\r\n\r\n      microsoftTeams.tasks.startTask(taskInfo, submitHandler);\r\n    }\r\n  }\r\n}\r\n\r\nconst mapStateToProps = (state: any) => {\r\n  return { messages: state.draftMessagesList, selectedMessage: state.selectedMessage };\r\n}\r\n\r\nconst draftMessagesWithTranslation = withTranslation()(DraftMessages);\r\nexport default connect(mapStateToProps, { selectMessage, getDraftMessagesList, getMessagesList })(draftMessagesWithTranslation);","import * as React from 'react';\r\nimport { withTranslation, WithTranslation } from \"react-i18next\";\r\nimport Messages from '../Messages/messages';\r\nimport DraftMessages from '../DraftMessages/draftMessages';\r\nimport './tabContainer.scss';\r\nimport * as microsoftTeams from \"@microsoft/teams-js\";\r\nimport { getBaseUrl } from '../../configVariables';\r\nimport { Accordion, Button } from '@stardust-ui/react';\r\nimport { getDraftMessagesList } from '../../actions';\r\nimport { connect } from 'react-redux';\r\nimport { TFunction } from \"i18next\";\r\n\r\ninterface ITaskInfo {\r\n    title?: string;\r\n    height?: number;\r\n    width?: number;\r\n    url?: string;\r\n    card?: string;\r\n    fallbackUrl?: string;\r\n    completionBotId?: string;\r\n}\r\n\r\nexport interface ITaskInfoProps extends WithTranslation {\r\n    getDraftMessagesList?: any;\r\n}\r\n\r\nexport interface ITabContainerState {\r\n    url: string;\r\n}\r\n\r\nclass TabContainer extends React.Component<ITaskInfoProps, ITabContainerState> {\r\n    readonly localize: TFunction;\r\n    constructor(props: ITaskInfoProps) {\r\n        super(props);\r\n        this.localize = this.props.t;\r\n        this.state = {\r\n            url: getBaseUrl() + \"/newmessage?locale={locale}\"\r\n        }\r\n        this.escFunction = this.escFunction.bind(this);\r\n    }\r\n\r\n    public componentDidMount() {\r\n        microsoftTeams.initialize();\r\n        //- Handle the Esc key\r\n        document.addEventListener(\"keydown\", this.escFunction, false);\r\n    }\r\n\r\n    public componentWillUnmount() {\r\n        document.removeEventListener(\"keydown\", this.escFunction, false);\r\n    }\r\n\r\n    public escFunction(event: any) {\r\n        if (event.keyCode === 27 || (event.key === \"Escape\")) {\r\n            microsoftTeams.tasks.submitTask();\r\n        }\r\n    }\r\n\r\n    public render(): JSX.Element {\r\n        const panels = [\r\n            {\r\n                title: this.localize('DraftMessagesSectionTitle'),\r\n                content: {\r\n                    key: 'sent',\r\n                    content: (\r\n                        <div className=\"messages\">\r\n                            <DraftMessages></DraftMessages>\r\n                        </div>\r\n                    ),\r\n                },\r\n            },\r\n            {\r\n                title: this.localize('SentMessagesSectionTitle'),\r\n                content: {\r\n                    key: 'draft',\r\n                    content: (\r\n                        <div className=\"messages\">\r\n                            <Messages></Messages>\r\n                        </div>\r\n                    ),\r\n                },\r\n            }\r\n        ]\r\n        return (\r\n            <div className=\"tabContainer\">\r\n                <div className=\"newPostBtn\">\r\n                    <Button content={this.localize(\"NewMessage\")} onClick={this.onNewMessage} primary />\r\n                </div>\r\n                <div className=\"messageContainer\">\r\n                    <Accordion defaultActiveIndex={[0, 1]} panels={panels} />\r\n                </div>\r\n            </div>\r\n        );\r\n    }\r\n\r\n    public onNewMessage = () => {\r\n        let taskInfo: ITaskInfo = {\r\n            url: this.state.url,\r\n            title: this.localize(\"NewMessage\"),\r\n            height: 530,\r\n            width: 1000,\r\n            fallbackUrl: this.state.url,\r\n        }\r\n\r\n        let submitHandler = (err: any, result: any) => {\r\n            this.props.getDraftMessagesList();\r\n        };\r\n\r\n        microsoftTeams.tasks.startTask(taskInfo, submitHandler);\r\n    }\r\n}\r\n\r\nconst mapStateToProps = (state: any) => {\r\n    return { messages: state.draftMessagesList };\r\n}\r\n\r\nconst tabContainerWithTranslation = withTranslation()(TabContainer);\r\nexport default connect(mapStateToProps, { getDraftMessagesList })(tabContainerWithTranslation);","import { TFunction } from \"i18next\";\r\n\r\nexport const getInitAdaptiveCard = (t: TFunction) => {\r\n    const titleTextAsString = t(\"TitleText\");\r\n    return (\r\n        {\r\n            \"type\": \"AdaptiveCard\",\r\n            \"body\": [\r\n                {\r\n                    \"type\": \"TextBlock\",\r\n                    \"weight\": \"Bolder\",\r\n                    \"text\": titleTextAsString,\r\n                    \"size\": \"ExtraLarge\",\r\n                    \"wrap\": true\r\n                },\r\n                {\r\n                    \"type\": \"Image\",\r\n                    \"spacing\": \"Default\",\r\n                    \"url\": \"\",\r\n                    \"size\": \"Stretch\",\r\n                    \"width\": \"400px\",\r\n                    \"altText\": \"\"\r\n                },\r\n                {\r\n                    \"type\": \"TextBlock\",\r\n                    \"text\": \"\",\r\n                    \"wrap\": true\r\n                },\r\n                {\r\n                    \"type\": \"TextBlock\",\r\n                    \"wrap\": true,\r\n                    \"size\": \"Small\",\r\n                    \"weight\": \"Lighter\",\r\n                    \"text\": \"\"\r\n                }\r\n            ],\r\n            \"$schema\": \"https://adaptivecards.io/schemas/adaptive-card.json\",\r\n            \"version\": \"1.0\"\r\n        }\r\n    );\r\n}\r\n\r\nexport const getCardTitle = (card: any) => {\r\n    return card.body[0].text;\r\n}\r\n\r\nexport const setCardTitle = (card: any, title: string) => {\r\n    card.body[0].text = title;\r\n}\r\n\r\nexport const getCardImageLink = (card: any) => {\r\n    return card.body[1].url;\r\n}\r\n\r\nexport const setCardImageLink = (card: any, imageLink?: string) => {\r\n    card.body[1].url = imageLink;\r\n}\r\n\r\nexport const getCardSummary = (card: any) => {\r\n    return card.body[2].text;\r\n}\r\n\r\nexport const setCardSummary = (card: any, summary?: string) => {\r\n    card.body[2].text = summary;\r\n}\r\n\r\nexport const getCardAuthor = (card: any) => {\r\n    return card.body[3].text;\r\n}\r\n\r\nexport const setCardAuthor = (card: any, author?: string) => {\r\n    card.body[3].text = author;\r\n}\r\n\r\nexport const getCardBtnTitle = (card: any) => {\r\n    return card.actions[0].title;\r\n}\r\n\r\nexport const getCardBtnLink = (card: any) => {\r\n    return card.actions[0].url;\r\n}\r\n\r\nexport const setCardBtn = (card: any, buttonTitle?: string, buttonLink?: string) => {\r\n    if (buttonTitle && buttonLink) {\r\n        card.actions = [\r\n            {\r\n                \"type\": \"Action.OpenUrl\",\r\n                \"title\": buttonTitle,\r\n                \"url\": buttonLink\r\n            }\r\n        ];\r\n    } else {\r\n        delete card.actions;\r\n    }\r\n}\r\n","import ColorHash from \"color-hash\";\r\n\r\nexport class ImageUtil {\r\n\r\n    public static makeInitialImage = (name: string) => {\r\n        const canvas = document.createElement('canvas');\r\n        canvas.style.display = 'none';\r\n        canvas.width = 32;\r\n        canvas.height = 32;\r\n        document.body.appendChild(canvas);\r\n        const context = canvas.getContext('2d');\r\n        if (context) {\r\n            let colorHash = new ColorHash();\r\n            const colorNum = colorHash.hex(name);\r\n            context.fillStyle = colorNum;\r\n            context.fillRect(0, 0, canvas.width, canvas.height);\r\n            context.font = \"16px Arial\";\r\n            context.fillStyle = \"#fff\";\r\n            const split = name.split(' ');\r\n            const len = split.length;\r\n            const first = split[0][0];\r\n            if (len > 1) {\r\n                const last = split[len - 1][0];\r\n                const initials = first + last;\r\n                context.fillText(initials.toUpperCase(), 3, 23);\r\n            } else {\r\n                context.fillText(first.toUpperCase(), 10, 23);\r\n            }\r\n            const data = canvas.toDataURL();\r\n            document.body.removeChild(canvas);\r\n            return data;\r\n        } else {\r\n            return \"\";\r\n        }\r\n    }\r\n}","import * as React from 'react';\r\nimport { RouteComponentProps } from 'react-router-dom';\r\nimport { withTranslation, WithTranslation } from \"react-i18next\";\r\nimport { Input, TextArea, Radiobutton, RadiobuttonGroup } from 'msteams-ui-components-react';\r\nimport { initializeIcons } from 'office-ui-fabric-react/lib/Icons';\r\nimport * as AdaptiveCards from \"adaptivecards\";\r\nimport { Button, Loader, Dropdown, Text } from '@stardust-ui/react';\r\nimport * as microsoftTeams from \"@microsoft/teams-js\";\r\n\r\nimport './newMessage.scss';\r\nimport './teamTheme.scss';\r\nimport { getDraftNotification, getTeams, createDraftNotification, updateDraftNotification, searchGroups, getGroups, verifyGroupAccess  } from '../../apis/messageListApi';\r\nimport {\r\n    getInitAdaptiveCard, setCardTitle, setCardImageLink, setCardSummary,\r\n    setCardAuthor, setCardBtn\r\n} from '../AdaptiveCard/adaptiveCard';\r\nimport { getBaseUrl } from '../../configVariables';\r\nimport { ImageUtil } from '../../utility/imageutility';\r\nimport { TFunction } from \"i18next\";\r\nimport { ChangeEvent } from 'react';\r\n\r\ntype dropdownItem = {\r\n    key: string,\r\n    header: string,\r\n    content: string,\r\n    image: string,\r\n    team: {\r\n        id: string,\r\n    },\r\n}\r\n\r\nexport interface IDraftMessage {\r\n    id?: string,\r\n    title: string,\r\n    imageLink?: string,\r\n    summary?: string,\r\n    author: string,\r\n    buttonTitle?: string,\r\n    buttonLink?: string,\r\n    teams: any[],\r\n    rosters: any[],\r\n    groups: any[],\r\n    allUsers: boolean,\r\n    csvlist: any\r\n}\r\n\r\nexport interface formState {\r\n    title: string,\r\n    summary?: string,\r\n    btnLink?: string,\r\n    imageLink?: string,\r\n    btnTitle?: string,\r\n    author: string,\r\n    card?: any,\r\n    page: string,\r\n    teamsOptionSelected: boolean,\r\n    rostersOptionSelected: boolean,\r\n    allUsersOptionSelected: boolean,\r\n    groupsOptionSelected: boolean,\r\n    csvlistOptionSelected: boolean,\r\n    teams?: any[],\r\n    groups?: any[],\r\n    exists?: boolean,\r\n    messageId: string,\r\n    loader: boolean,\r\n    groupAccess: boolean,\r\n    loading: boolean,\r\n    noResultMessage: string,\r\n    unstablePinned?: boolean,\r\n    selectedTeamsNum: number,\r\n    selectedRostersNum: number,\r\n    selectedGroupsNum: number,\r\n    selectedRadioBtn: string,\r\n    selectedTeams: dropdownItem[],\r\n    selectedRosters: dropdownItem[],\r\n    selectedGroups: dropdownItem[],\r\n    errorImageUrlMessage: string,\r\n    errorButtonUrlMessage: string,\r\n}\r\n\r\nexport interface INewMessageProps extends RouteComponentProps, WithTranslation {\r\n    getDraftMessagesList?: any;\r\n}\r\n\r\nclass NewMessage extends React.Component<INewMessageProps, formState> {\r\n    readonly localize: TFunction;\r\n    private card: any;\r\n    private csvfilename: string;\r\n\r\n    constructor(props: INewMessageProps) {\r\n        super(props);\r\n        initializeIcons();\r\n        this.localize = this.props.t;\r\n        this.card = getInitAdaptiveCard(this.localize);\r\n        this.setDefaultCard(this.card);\r\n\r\n        this.csvfilename = \"AAAAAAAAAAAAAAAAA\";\r\n\r\n        this.state = {\r\n            title: \"\",\r\n            summary: \"\",\r\n            author: \"\",\r\n            btnLink: \"\",\r\n            imageLink: \"\",\r\n            btnTitle: \"\",\r\n            card: this.card,\r\n            page: \"CardCreation\",\r\n            teamsOptionSelected: true,\r\n            rostersOptionSelected: false,\r\n            allUsersOptionSelected: false,\r\n            groupsOptionSelected: false,\r\n            csvlistOptionSelected: false,\r\n            messageId: \"\",\r\n            loader: true,\r\n            groupAccess: false,\r\n            loading: false,\r\n            noResultMessage: \"\",\r\n            unstablePinned: true,\r\n            selectedTeamsNum: 0,\r\n            selectedRostersNum: 0,\r\n            selectedGroupsNum: 0,\r\n            selectedRadioBtn: \"teams\",\r\n            selectedTeams: [],\r\n            selectedRosters: [],\r\n            selectedGroups: [],\r\n            errorImageUrlMessage: \"\",\r\n            errorButtonUrlMessage: \"\"\r\n        }\r\n    }\r\n\r\n    public async componentDidMount() {\r\n        microsoftTeams.initialize();\r\n        //- Handle the Esc key\r\n        document.addEventListener(\"keydown\", this.escFunction, false);\r\n        let params = this.props.match.params;\r\n        this.setGroupAccess();\r\n        this.getTeamList().then(() => {\r\n            if ('id' in params) {\r\n                let id = params['id'];\r\n                this.getItem(id).then(() => {\r\n                    const selectedTeams = this.makeDropdownItemList(this.state.selectedTeams, this.state.teams);\r\n                    const selectedRosters = this.makeDropdownItemList(this.state.selectedRosters, this.state.teams);\r\n                    this.setState({\r\n                        exists: true,\r\n                        messageId: id,\r\n                        selectedTeams: selectedTeams,\r\n                        selectedRosters: selectedRosters,\r\n                    })\r\n                });\r\n                this.getGroupData(id).then(() => {\r\n                    const selectedGroups = this.makeDropdownItems(this.state.groups);\r\n                    this.setState({\r\n                        selectedGroups: selectedGroups\r\n                    })\r\n                });\r\n            } else {\r\n                this.setState({\r\n                    exists: false,\r\n                    loader: false\r\n                }, () => {\r\n                    let adaptiveCard = new AdaptiveCards.AdaptiveCard();\r\n                    adaptiveCard.parse(this.state.card);\r\n                    let renderedCard = adaptiveCard.render();\r\n                    document.getElementsByClassName('adaptiveCardContainer')[0].appendChild(renderedCard);\r\n                    if (this.state.btnLink) {\r\n                        let link = this.state.btnLink;\r\n                        adaptiveCard.onExecuteAction = function (action) { window.open(link, '_blank'); };\r\n                    }\r\n                })\r\n            }\r\n        });\r\n    }\r\n\r\n    private makeDropdownItems = (items: any[] | undefined) => {\r\n        const resultedTeams: dropdownItem[] = [];\r\n        if (items) {\r\n            items.forEach((element) => {\r\n                resultedTeams.push({\r\n                    key: element.id,\r\n                    header: element.name,\r\n                    content: element.mail,\r\n                    image: ImageUtil.makeInitialImage(element.name),\r\n                    team: {\r\n                        id: element.id\r\n                    },\r\n\r\n                });\r\n            });\r\n        }\r\n        return resultedTeams;\r\n    }\r\n\r\n    private makeDropdownItemList = (items: any[], fromItems: any[] | undefined) => {\r\n        const dropdownItemList: dropdownItem[] = [];\r\n        items.forEach(element =>\r\n            dropdownItemList.push(\r\n                typeof element !== \"string\" ? element : {\r\n                    key: fromItems!.find(x => x.id === element).id,\r\n                    header: fromItems!.find(x => x.id === element).name,\r\n                    image: ImageUtil.makeInitialImage(fromItems!.find(x => x.id === element).name),\r\n                    team: {\r\n                        id: element\r\n                    }\r\n                })\r\n        );\r\n        return dropdownItemList;\r\n    }\r\n\r\n    public setDefaultCard = (card: any) => {\r\n        const titleAsString = this.localize(\"TitleText\");\r\n        const summaryAsString = this.localize(\"Summary\");\r\n        const authorAsString = this.localize(\"Author1\");\r\n        const buttonTitleAsString = this.localize(\"ButtonTitle\");\r\n\r\n        setCardTitle(card, titleAsString);\r\n        let imgUrl = getBaseUrl() + \"/image/imagePlaceholder.png\";\r\n        setCardImageLink(card, imgUrl);\r\n        setCardSummary(card, summaryAsString);\r\n        setCardAuthor(card, authorAsString);\r\n        setCardBtn(card, buttonTitleAsString, \"https://adaptivecards.io\");\r\n    }\r\n\r\n    private getTeamList = async () => {\r\n        try {\r\n            const response = await getTeams();\r\n            this.setState({\r\n                teams: response.data\r\n            });\r\n        } catch (error) {\r\n            return error;\r\n        }\r\n    }\r\n\r\n    private getGroupItems() {\r\n        if (this.state.groups) {\r\n            return this.makeDropdownItems(this.state.groups);\r\n        }\r\n        const dropdownItems: dropdownItem[] = [];\r\n        return dropdownItems;\r\n    }\r\n\r\n    private setGroupAccess = async () => {\r\n        await verifyGroupAccess().then(() => {\r\n            this.setState({\r\n                groupAccess: true\r\n            });\r\n        }).catch((error) => {\r\n            const errorStatus = error.response.status;\r\n            if (errorStatus === 403) {\r\n                this.setState({\r\n                    groupAccess: false\r\n                });\r\n            }\r\n            else {\r\n                throw error;\r\n            }\r\n        });\r\n    }\r\n\r\n    private getGroupData = async (id: number) => {\r\n        try {\r\n            const response = await getGroups(id);\r\n            this.setState({\r\n                groups: response.data\r\n            });\r\n        }\r\n        catch (error) {\r\n            return error;\r\n        }\r\n    }\r\n\r\n    private getItem = async (id: number) => {\r\n        try {\r\n            const response = await getDraftNotification(id);\r\n            const draftMessageDetail = response.data;\r\n            let selectedRadioButton = \"teams\";\r\n            if (draftMessageDetail.rosters.length > 0) {\r\n                selectedRadioButton = \"rosters\";\r\n            }\r\n            else if (draftMessageDetail.groups.length > 0) {\r\n                selectedRadioButton = \"groups\";\r\n            }\r\n            else if (draftMessageDetail.allUsers) {\r\n                selectedRadioButton = \"allUsers\";\r\n            }\r\n            else if (draftMessageDetail.csvlist) {\r\n                selectedRadioButton = \"csvlist\";\r\n            }\r\n            this.setState({\r\n                teamsOptionSelected: draftMessageDetail.teams.length > 0,\r\n                selectedTeamsNum: draftMessageDetail.teams.length,\r\n                rostersOptionSelected: draftMessageDetail.rosters.length > 0,\r\n                selectedRostersNum: draftMessageDetail.rosters.length,\r\n                groupsOptionSelected: draftMessageDetail.groups.length > 0,\r\n                selectedGroupsNum: draftMessageDetail.groups.length,\r\n                selectedRadioBtn: selectedRadioButton,\r\n                selectedTeams: draftMessageDetail.teams,\r\n                selectedRosters: draftMessageDetail.rosters,\r\n                selectedGroups: draftMessageDetail.groups\r\n            });\r\n\r\n            setCardTitle(this.card, draftMessageDetail.title);\r\n            setCardImageLink(this.card, draftMessageDetail.imageLink);\r\n            setCardSummary(this.card, draftMessageDetail.summary);\r\n            setCardAuthor(this.card, draftMessageDetail.author);\r\n            setCardBtn(this.card, draftMessageDetail.buttonTitle, draftMessageDetail.buttonLink);\r\n\r\n            this.setState({\r\n                title: draftMessageDetail.title,\r\n                summary: draftMessageDetail.summary,\r\n                btnLink: draftMessageDetail.buttonLink,\r\n                imageLink: draftMessageDetail.imageLink,\r\n                btnTitle: draftMessageDetail.buttonTitle,\r\n                author: draftMessageDetail.author,\r\n                allUsersOptionSelected: draftMessageDetail.allUsers,\r\n                loader: false\r\n            }, () => {\r\n                this.updateCard();\r\n            });\r\n        } catch (error) {\r\n            return error;\r\n        }\r\n    }\r\n\r\n    public componentWillUnmount() {\r\n        document.removeEventListener(\"keydown\", this.escFunction, false);\r\n    }\r\n\r\n    public render(): JSX.Element {\r\n        if (this.state.loader) {\r\n            return (\r\n                <div className=\"Loader\">\r\n                    <Loader />\r\n                </div>\r\n            );\r\n        } else {\r\n            if (this.state.page === \"CardCreation\") {\r\n                return (\r\n                    <div className=\"taskModule\">\r\n                        <div className=\"formContainer\">\r\n                            <div className=\"formContentContainer\" >\r\n                                <Input\r\n                                    className=\"inputField\"\r\n                                    value={this.state.title}\r\n                                    label={this.localize(\"TitleText\")}\r\n                                    placeholder={this.localize(\"PlaceHolderTitle\")}\r\n                                    onChange={this.onTitleChanged}\r\n                                    autoComplete=\"off\"\r\n                                    required\r\n                                />\r\n\r\n                                <Input\r\n                                    className=\"inputField\"\r\n                                    value={this.state.imageLink}\r\n                                    label={this.localize(\"ImageURL\")}\r\n                                    placeholder={this.localize(\"ImageURL\")}\r\n                                    onChange={this.onImageLinkChanged}\r\n                                    errorLabel={this.state.errorImageUrlMessage}\r\n                                    autoComplete=\"off\"\r\n                                />\r\n\r\n                                <TextArea\r\n                                    className=\"inputField textArea\"\r\n                                    autoFocus\r\n                                    placeholder={this.localize(\"Summary\")}\r\n                                    label={this.localize(\"Summary\")}\r\n                                    value={this.state.summary}\r\n                                    onChange={this.onSummaryChanged}\r\n                                />\r\n\r\n                                <Input\r\n                                    className=\"inputField\"\r\n                                    value={this.state.author}\r\n                                    label={this.localize(\"Author\")}\r\n                                    placeholder={this.localize(\"Author\")}\r\n                                    onChange={this.onAuthorChanged}\r\n                                    autoComplete=\"off\"\r\n                                />\r\n\r\n                                <Input\r\n                                    className=\"inputField\"\r\n                                    value={this.state.btnTitle}\r\n                                    label={this.localize(\"ButtonTitle\")}\r\n                                    placeholder={this.localize(\"ButtonTitle\")}\r\n                                    onChange={this.onBtnTitleChanged}\r\n                                    autoComplete=\"off\"\r\n                                />\r\n\r\n                                <Input\r\n                                    className=\"inputField\"\r\n                                    value={this.state.btnLink}\r\n                                    label={this.localize(\"ButtonURL\")}\r\n                                    placeholder={this.localize(\"ButtonURL\")}\r\n                                    onChange={this.onBtnLinkChanged}\r\n                                    errorLabel={this.state.errorButtonUrlMessage}\r\n                                    autoComplete=\"off\"\r\n                                />\r\n                            </div>\r\n                            <div className=\"adaptiveCardContainer\">\r\n                            </div>\r\n                        </div>\r\n\r\n                        <div className=\"footerContainer\">\r\n                            <div className=\"buttonContainer\">\r\n                                <Button content={this.localize(\"Next\")} disabled={this.isNextBtnDisabled()} id=\"saveBtn\" onClick={this.onNext} primary />\r\n                            </div>\r\n                        </div>\r\n                    </div>\r\n                );\r\n            }\r\n            else if (this.state.page === \"AudienceSelection\") {\r\n                return (\r\n                    <div className=\"taskModule\">\r\n                        <div className=\"formContainer\">\r\n                            <div className=\"formContentContainer\" >\r\n                                <h3>{this.localize(\"SendHeadingText\")}</h3>\r\n                                <RadiobuttonGroup\r\n                                    className=\"radioBtns\"\r\n                                    value={this.state.selectedRadioBtn}\r\n                                    onSelected={this.onGroupSelected}\r\n                                >\r\n                                    <Radiobutton name=\"grouped\" value=\"teams\" label={this.localize(\"SendToGeneralChannel\")} />\r\n                                    <Dropdown\r\n                                        hidden={!this.state.teamsOptionSelected}\r\n                                        placeholder={this.localize(\"SendToGeneralChannelPlaceHolder\")}\r\n                                        search\r\n                                        multiple\r\n                                        items={this.getItems()}\r\n                                        value={this.state.selectedTeams}\r\n                                        onSelectedChange={this.onTeamsChange}\r\n                                        noResultsMessage={this.localize(\"NoMatchMessage\")}\r\n                                    />\r\n                                    <Radiobutton name=\"grouped\" value=\"rosters\" label={this.localize(\"SendToRosters\")} />\r\n                                    <Dropdown\r\n                                        hidden={!this.state.rostersOptionSelected}\r\n                                        placeholder={this.localize(\"SendToRostersPlaceHolder\")}\r\n                                        search\r\n                                        multiple\r\n                                        items={this.getItems()}\r\n                                        value={this.state.selectedRosters}\r\n                                        onSelectedChange={this.onRostersChange}\r\n                                        unstable_pinned={this.state.unstablePinned}\r\n                                        noResultsMessage={this.localize(\"NoMatchMessage\")}\r\n                                    />\r\n                                    <Radiobutton name=\"grouped\" value=\"allUsers\" label={this.localize(\"SendToAllUsers\")} />\r\n                                    <div className={this.state.selectedRadioBtn === \"allUsers\" ? \"\" : \"hide\"}>\r\n                                        <div className=\"noteText\">\r\n                                            <Text error content={this.localize(\"SendToAllUsersNote\")} />\r\n                                        </div>\r\n                                    </div>\r\n                                    <Radiobutton name=\"grouped\" value=\"groups\" label={this.localize(\"SendToGroups\")} />\r\n                                    <div className={this.state.groupsOptionSelected && !this.state.groupAccess ? \"\" : \"hide\"}>\r\n                                        <div className=\"noteText\">\r\n                                            <Text error content={this.localize(\"SendToGroupsPermissionNote\")} />\r\n                                        </div>\r\n                                    </div>\r\n                                    <Dropdown\r\n                                        className=\"hideToggle\"\r\n                                        hidden={!this.state.groupsOptionSelected || !this.state.groupAccess}\r\n                                        placeholder={this.localize(\"SendToGroupsPlaceHolder\")}\r\n                                        search={this.onGroupSearch}\r\n                                        multiple\r\n                                        loading={this.state.loading}\r\n                                        loadingMessage={this.localize(\"LoadingText\")}\r\n                                        items={this.getGroupItems()}\r\n                                        value={this.state.selectedGroups}\r\n                                        onSearchQueryChange={this.onGroupSearchQueryChange}\r\n                                        onSelectedChange={this.onGroupsChange}\r\n                                        noResultsMessage={this.state.noResultMessage}\r\n                                        unstable_pinned={this.state.unstablePinned}\r\n                                    />\r\n                                    <div className={this.state.groupsOptionSelected && this.state.groupAccess ? \"\" : \"hide\"}>\r\n                                        <div className=\"noteText\">\r\n                                            <Text error content={this.localize(\"SendToGroupsNote\")} />\r\n                                        </div>\r\n                                    </div>\r\n                                    <Radiobutton name=\"grouped\" value=\"csvlist\" label={this.csvfilename} />\r\n                                    <input\r\n                                        type='file'\r\n                                        multiple={false}\r\n                                        id='csv'\r\n                                        name='csv'\r\n                                        accept='file/csv'\r\n                                        onChange={this.handleFileChange}\r\n                                    ></input>\r\n                                    <div className=\"noteText\">\r\n                                        <Text error content={this.csvfilename} />\r\n                                    </div>\r\n                                </RadiobuttonGroup>\r\n                            </div>\r\n                            <div className=\"adaptiveCardContainer\">\r\n                            </div>\r\n                        </div>\r\n\r\n                        <div className=\"footerContainer\">\r\n                            <div className=\"buttonContainer\">\r\n                                <Button content={this.localize(\"Back\")} onClick={this.onBack} secondary />\r\n                                <Button content={this.localize(\"SaveAsDraft\")} disabled={this.isSaveBtnDisabled()} id=\"saveBtn\" onClick={this.onSave} primary />\r\n                            </div>\r\n                        </div>\r\n                    </div>\r\n                );\r\n            } else {\r\n                return (<div>Error</div>);\r\n            }\r\n        }\r\n    }\r\n\r\n    private onGroupSelected = (value: any) => {\r\n        this.setState({\r\n            selectedRadioBtn: value,\r\n            teamsOptionSelected: value === 'teams',\r\n            rostersOptionSelected: value === 'rosters',\r\n            groupsOptionSelected: value === 'groups',\r\n            allUsersOptionSelected: value === 'allUsers',\r\n            selectedTeams: value === 'teams' ? this.state.selectedTeams : [],\r\n            selectedTeamsNum: value === 'teams' ? this.state.selectedTeamsNum : 0,\r\n            selectedRosters: value === 'rosters' ? this.state.selectedRosters : [],\r\n            selectedRostersNum: value === 'rosters' ? this.state.selectedRostersNum : 0,\r\n            selectedGroups: value === 'groups' ? this.state.selectedGroups : [],\r\n            selectedGroupsNum: value === 'groups' ? this.state.selectedGroupsNum : 0,\r\n        });\r\n    }\r\n\r\n    private isSaveBtnDisabled = () => {\r\n        const teamsSelectionIsValid = (this.state.teamsOptionSelected && (this.state.selectedTeamsNum !== 0)) || (!this.state.teamsOptionSelected);\r\n        const rostersSelectionIsValid = (this.state.rostersOptionSelected && (this.state.selectedRostersNum !== 0)) || (!this.state.rostersOptionSelected);\r\n        const groupsSelectionIsValid = (this.state.groupsOptionSelected && (this.state.selectedGroupsNum !== 0)) || (!this.state.groupsOptionSelected);\r\n        const nothingSelected = (!this.state.teamsOptionSelected) && (!this.state.rostersOptionSelected) && (!this.state.groupsOptionSelected) && (!this.state.allUsersOptionSelected);\r\n        return (!teamsSelectionIsValid || !rostersSelectionIsValid || !groupsSelectionIsValid || nothingSelected)\r\n    }\r\n\r\n    private isNextBtnDisabled = () => {\r\n        const title = this.state.title;\r\n        const btnTitle = this.state.btnTitle;\r\n        const btnLink = this.state.btnLink;\r\n        return !(title && ((btnTitle && btnLink) || (!btnTitle && !btnLink)) && (this.state.errorImageUrlMessage === \"\") && (this.state.errorButtonUrlMessage === \"\"));\r\n    }\r\n\r\n    private getItems = () => {\r\n        const resultedTeams: dropdownItem[] = [];\r\n        if (this.state.teams) {\r\n            let remainingUserTeams = this.state.teams;\r\n            if (this.state.selectedRadioBtn !== \"allUsers\") {\r\n                if (this.state.selectedRadioBtn === \"teams\") {\r\n                    this.state.teams.filter(x => this.state.selectedTeams.findIndex(y => y.team.id === x.id) < 0);\r\n                }\r\n                else if (this.state.selectedRadioBtn === \"rosters\") {\r\n                    this.state.teams.filter(x => this.state.selectedRosters.findIndex(y => y.team.id === x.id) < 0);\r\n                }\r\n            }\r\n            remainingUserTeams.forEach((element) => {\r\n                resultedTeams.push({\r\n                    key: element.id,\r\n                    header: element.name,\r\n                    content: element.mail,\r\n                    image: ImageUtil.makeInitialImage(element.name),\r\n                    team: {\r\n                        id: element.id\r\n                    }\r\n                });\r\n            });\r\n        }\r\n        return resultedTeams;\r\n    }\r\n\r\n    private static MAX_SELECTED_TEAMS_NUM: number = 20;\r\n\r\n    private onTeamsChange = (event: any, itemsData: any) => {\r\n        if (itemsData.value.length > NewMessage.MAX_SELECTED_TEAMS_NUM) return;\r\n        this.setState({\r\n            selectedTeams: itemsData.value,\r\n            selectedTeamsNum: itemsData.value.length,\r\n            selectedRosters: [],\r\n            selectedRostersNum: 0,\r\n            selectedGroups: [],\r\n            selectedGroupsNum: 0\r\n        })\r\n    }\r\n\r\n    private onRostersChange = (event: any, itemsData: any) => {\r\n        if (itemsData.value.length > NewMessage.MAX_SELECTED_TEAMS_NUM) return;\r\n        this.setState({\r\n            selectedRosters: itemsData.value,\r\n            selectedRostersNum: itemsData.value.length,\r\n            selectedTeams: [],\r\n            selectedTeamsNum: 0,\r\n            selectedGroups: [],\r\n            selectedGroupsNum: 0\r\n        })\r\n    }\r\n\r\n    private onGroupsChange = (event: any, itemsData: any) => {\r\n        this.setState({\r\n            selectedGroups: itemsData.value,\r\n            selectedGroupsNum: itemsData.value.length,\r\n            groups: [],\r\n            selectedTeams: [],\r\n            selectedTeamsNum: 0,\r\n            selectedRosters: [],\r\n            selectedRostersNum: 0\r\n        })\r\n    }\r\n\r\n    private onGroupSearch = (itemList: any, searchQuery: string) => {\r\n        const result = itemList.filter(\r\n            (item: { header: string; content: string; }) => (item.header && item.header.toLowerCase().indexOf(searchQuery.toLowerCase()) !== -1) ||\r\n                (item.content && item.content.toLowerCase().indexOf(searchQuery.toLowerCase()) !== -1),\r\n        )\r\n        return result;\r\n    }\r\n\r\n    private onGroupSearchQueryChange = async (event: any, itemsData: any) => {\r\n\r\n        if (!itemsData.searchQuery) {\r\n            this.setState({\r\n                groups: [],\r\n                noResultMessage: \"\",\r\n            });\r\n        }\r\n        else if (itemsData.searchQuery && itemsData.searchQuery.length <= 2) {\r\n            this.setState({\r\n                loading: false,\r\n                noResultMessage: \"No matches found.\",\r\n            });\r\n        }\r\n        else if (itemsData.searchQuery && itemsData.searchQuery.length > 2) {\r\n            // handle event trigger on item select.\r\n            const result = itemsData.items && itemsData.items.find(\r\n                (item: { header: string; }) => item.header.toLowerCase() === itemsData.searchQuery.toLowerCase()\r\n            )\r\n            if (result) {\r\n                return;\r\n            }\r\n\r\n            this.setState({\r\n                loading: true,\r\n                noResultMessage: \"\",\r\n            });\r\n\r\n            try {\r\n                const query = encodeURIComponent(itemsData.searchQuery);\r\n                const response = await searchGroups(query);\r\n                this.setState({\r\n                    groups: response.data,\r\n                    loading: false,\r\n                    noResultMessage: \"No matches found.\"\r\n                });\r\n            }\r\n            catch (error) {\r\n                return error;\r\n            }\r\n        }\r\n    }\r\n\r\n    private onSave = () => {\r\n        const selectedTeams: string[] = [];\r\n        const selctedRosters: string[] = [];\r\n        const selectedGroups: string[] = [];\r\n        this.state.selectedTeams.forEach(x => selectedTeams.push(x.team.id));\r\n        this.state.selectedRosters.forEach(x => selctedRosters.push(x.team.id));\r\n        this.state.selectedGroups.forEach(x => selectedGroups.push(x.team.id));\r\n\r\n        const draftMessage: IDraftMessage = {\r\n            id: this.state.messageId,\r\n            title: this.state.title,\r\n            imageLink: this.state.imageLink,\r\n            summary: this.state.summary,\r\n            author: this.state.author,\r\n            buttonTitle: this.state.btnTitle,\r\n            buttonLink: this.state.btnLink,\r\n            teams: selectedTeams,\r\n            rosters: selctedRosters,\r\n            groups: selectedGroups,\r\n            allUsers: this.state.allUsersOptionSelected,\r\n            csvlist: this.state.csvlistOptionSelected\r\n        };\r\n\r\n        if (this.state.exists) {\r\n            this.editDraftMessage(draftMessage).then(() => {\r\n                microsoftTeams.tasks.submitTask();\r\n            });\r\n        } else {\r\n            this.postDraftMessage(draftMessage).then(() => {\r\n                microsoftTeams.tasks.submitTask();\r\n            });\r\n        }\r\n    }\r\n\r\n    private editDraftMessage = async (draftMessage: IDraftMessage) => {\r\n        try {\r\n            await updateDraftNotification(draftMessage);\r\n        } catch (error) {\r\n            return error;\r\n        }\r\n    }\r\n\r\n    private postDraftMessage = async (draftMessage: IDraftMessage) => {\r\n        try {\r\n            await createDraftNotification(draftMessage);\r\n        } catch (error) {\r\n            throw error;\r\n        }\r\n    }\r\n\r\n    public escFunction(event: any) {\r\n        if (event.keyCode === 27 || (event.key === \"Escape\")) {\r\n            microsoftTeams.tasks.submitTask();\r\n        }\r\n    }\r\n\r\n    private onNext = (event: any) => {\r\n        this.setState({\r\n            page: \"AudienceSelection\"\r\n        }, () => {\r\n            this.updateCard();\r\n        });\r\n    }\r\n\r\n    private onBack = (event: any) => {\r\n        this.setState({\r\n            page: \"CardCreation\"\r\n        }, () => {\r\n            this.updateCard();\r\n        });\r\n    }\r\n\r\n    private onTitleChanged = (event: any) => {\r\n        let showDefaultCard = (!event.target.value && !this.state.imageLink && !this.state.summary && !this.state.author && !this.state.btnTitle && !this.state.btnLink);\r\n        setCardTitle(this.card, event.target.value);\r\n        setCardImageLink(this.card, this.state.imageLink);\r\n        setCardSummary(this.card, this.state.summary);\r\n        setCardAuthor(this.card, this.state.author);\r\n        setCardBtn(this.card, this.state.btnTitle, this.state.btnLink);\r\n        this.setState({\r\n            title: event.target.value,\r\n            card: this.card\r\n        }, () => {\r\n            if (showDefaultCard) {\r\n                this.setDefaultCard(this.card);\r\n            }\r\n            this.updateCard();\r\n        });\r\n    }\r\n\r\n    private onImageLinkChanged = (event: any) => {\r\n        let url = event.target.value.toLowerCase();\r\n        if (!((url === \"\") || (url.startsWith(\"https://\") || (url.startsWith(\"data:image/png;base64,\")) || (url.startsWith(\"data:image/jpeg;base64,\")) || (url.startsWith(\"data:image/gif;base64,\"))))) {\r\n            this.setState({\r\n                errorImageUrlMessage: \"URL must start with https://\"\r\n            });\r\n        } else {\r\n            this.setState({\r\n                errorImageUrlMessage: \"\"\r\n            });\r\n        }\r\n\r\n        let showDefaultCard = (!this.state.title && !event.target.value && !this.state.summary && !this.state.author && !this.state.btnTitle && !this.state.btnLink);\r\n        setCardTitle(this.card, this.state.title);\r\n        setCardImageLink(this.card, event.target.value);\r\n        setCardSummary(this.card, this.state.summary);\r\n        setCardAuthor(this.card, this.state.author);\r\n        setCardBtn(this.card, this.state.btnTitle, this.state.btnLink);\r\n        this.setState({\r\n            imageLink: event.target.value,\r\n            card: this.card\r\n        }, () => {\r\n            if (showDefaultCard) {\r\n                this.setDefaultCard(this.card);\r\n            }\r\n            this.updateCard();\r\n        });\r\n    }\r\n\r\n    private onSummaryChanged = (event: any) => {\r\n        let showDefaultCard = (!this.state.title && !this.state.imageLink && !event.target.value && !this.state.author && !this.state.btnTitle && !this.state.btnLink);\r\n        setCardTitle(this.card, this.state.title);\r\n        setCardImageLink(this.card, this.state.imageLink);\r\n        setCardSummary(this.card, event.target.value);\r\n        setCardAuthor(this.card, this.state.author);\r\n        setCardBtn(this.card, this.state.btnTitle, this.state.btnLink);\r\n        this.setState({\r\n            summary: event.target.value,\r\n            card: this.card\r\n        }, () => {\r\n            if (showDefaultCard) {\r\n                this.setDefaultCard(this.card);\r\n            }\r\n            this.updateCard();\r\n        });\r\n    }\r\n\r\n    private onAuthorChanged = (event: any) => {\r\n        let showDefaultCard = (!this.state.title && !this.state.imageLink && !this.state.summary && !event.target.value && !this.state.btnTitle && !this.state.btnLink);\r\n        setCardTitle(this.card, this.state.title);\r\n        setCardImageLink(this.card, this.state.imageLink);\r\n        setCardSummary(this.card, this.state.summary);\r\n        setCardAuthor(this.card, event.target.value);\r\n        setCardBtn(this.card, this.state.btnTitle, this.state.btnLink);\r\n        this.setState({\r\n            author: event.target.value,\r\n            card: this.card\r\n        }, () => {\r\n            if (showDefaultCard) {\r\n                this.setDefaultCard(this.card);\r\n            }\r\n            this.updateCard();\r\n        });\r\n    }\r\n\r\n    private onBtnTitleChanged = (event: any) => {\r\n        const showDefaultCard = (!this.state.title && !this.state.imageLink && !this.state.summary && !this.state.author && !event.target.value && !this.state.btnLink);\r\n        setCardTitle(this.card, this.state.title);\r\n        setCardImageLink(this.card, this.state.imageLink);\r\n        setCardSummary(this.card, this.state.summary);\r\n        setCardAuthor(this.card, this.state.author);\r\n        if (event.target.value && this.state.btnLink) {\r\n            setCardBtn(this.card, event.target.value, this.state.btnLink);\r\n            this.setState({\r\n                btnTitle: event.target.value,\r\n                card: this.card\r\n            }, () => {\r\n                if (showDefaultCard) {\r\n                    this.setDefaultCard(this.card);\r\n                }\r\n                this.updateCard();\r\n            });\r\n        } else {\r\n            delete this.card.actions;\r\n            this.setState({\r\n                btnTitle: event.target.value,\r\n            }, () => {\r\n                if (showDefaultCard) {\r\n                    this.setDefaultCard(this.card);\r\n                }\r\n                this.updateCard();\r\n            });\r\n        }\r\n    }\r\n\r\n    private onBtnLinkChanged = (event: any) => {\r\n        if (!(event.target.value === \"\" || event.target.value.toLowerCase().startsWith(\"https://\"))) {\r\n            this.setState({\r\n                errorButtonUrlMessage: \"URL must start with https://\"\r\n            });\r\n        } else {\r\n            this.setState({\r\n                errorButtonUrlMessage: \"\"\r\n            });\r\n        }\r\n\r\n        const showDefaultCard = (!this.state.title && !this.state.imageLink && !this.state.summary && !this.state.author && !this.state.btnTitle && !event.target.value);\r\n        setCardTitle(this.card, this.state.title);\r\n        setCardSummary(this.card, this.state.summary);\r\n        setCardAuthor(this.card, this.state.author);\r\n        setCardImageLink(this.card, this.state.imageLink);\r\n        if (this.state.btnTitle && event.target.value) {\r\n            setCardBtn(this.card, this.state.btnTitle, event.target.value);\r\n            this.setState({\r\n                btnLink: event.target.value,\r\n                card: this.card\r\n            }, () => {\r\n                if (showDefaultCard) {\r\n                    this.setDefaultCard(this.card);\r\n                }\r\n                this.updateCard();\r\n            });\r\n        } else {\r\n            delete this.card.actions;\r\n            this.setState({\r\n                btnLink: event.target.value\r\n            }, () => {\r\n                if (showDefaultCard) {\r\n                    this.setDefaultCard(this.card);\r\n                }\r\n                this.updateCard();\r\n            });\r\n        }\r\n    }\r\n\r\n    private updateCard = () => {\r\n        const adaptiveCard = new AdaptiveCards.AdaptiveCard();\r\n        adaptiveCard.parse(this.state.card);\r\n        const renderedCard = adaptiveCard.render();\r\n        const container = document.getElementsByClassName('adaptiveCardContainer')[0].firstChild;\r\n        if (container != null) {\r\n            container.replaceWith(renderedCard);\r\n        } else {\r\n            document.getElementsByClassName('adaptiveCardContainer')[0].appendChild(renderedCard);\r\n        }\r\n        const link = this.state.btnLink;\r\n        adaptiveCard.onExecuteAction = function (action) { window.open(link, '_blank'); }\r\n    }\r\n\r\n    private handleFileChange(event: ChangeEvent<HTMLInputElement>) {\r\n        if (event.currentTarget.files != null && event.currentTarget.files[0] != null) {\r\n            this.csvfilename = \"Filename = \" + event.currentTarget.files[0].name;\r\n        }\r\n\r\n        console.log(\"handleFileChange triggered\");\r\n        event.persist();\r\n        if (event.currentTarget.files != null) {\r\n            console.log(event.currentTarget.files[0].name);\r\n        }\r\n    }\r\n}\r\n\r\nconst newMessageWithTranslation = withTranslation()(NewMessage);\r\nexport default newMessageWithTranslation;\r\n","import * as React from 'react';\r\nimport { withTranslation, WithTranslation } from \"react-i18next\";\r\nimport './statusTaskModule.scss';\r\nimport { getSentNotification, exportNotification } from '../../apis/messageListApi';\r\nimport { RouteComponentProps } from 'react-router-dom';\r\nimport * as AdaptiveCards from \"adaptivecards\";\r\nimport { initializeIcons } from 'office-ui-fabric-react/lib/Icons';\r\nimport { TooltipHost } from 'office-ui-fabric-react';\r\nimport { Icon, Loader, List, Image, Button, IconProps } from '@stardust-ui/react';\r\nimport * as microsoftTeams from \"@microsoft/teams-js\";\r\nimport {\r\n    getInitAdaptiveCard, setCardTitle, setCardImageLink, setCardSummary,\r\n    setCardAuthor, setCardBtn\r\n} from '../AdaptiveCard/adaptiveCard';\r\nimport { ImageUtil } from '../../utility/imageutility';\r\nimport { formatDate, formatDuration, formatNumber } from '../../i18n';\r\nimport { TFunction } from \"i18next\";\r\n\r\nexport interface IListItem {\r\n    header: string,\r\n    media: JSX.Element,\r\n}\r\n\r\nexport interface IMessage {\r\n    id: string;\r\n    title: string;\r\n    acknowledgements?: string;\r\n    reactions?: string;\r\n    responses?: string;\r\n    succeeded?: string;\r\n    failed?: string;\r\n    unknown?: string;\r\n    sentDate?: string;\r\n    imageLink?: string;\r\n    summary?: string;\r\n    author?: string;\r\n    buttonLink?: string;\r\n    buttonTitle?: string;\r\n    teamNames?: string[];\r\n    rosterNames?: string[];\r\n    groupNames?: string[];\r\n    allUsers?: boolean;\r\n    sendingStartedDate?: string;\r\n    sendingDuration?: string;\r\n    errorMessage?: string;\r\n    warningMessage?: string;\r\n    canDownload?: boolean;\r\n    sendingCompleted?: boolean;\r\n}\r\n\r\nexport interface IStatusState {\r\n    message: IMessage;\r\n    loader: boolean;\r\n    page: string;\r\n    teamId?: string;\r\n}\r\n\r\ninterface StatusTaskModuleProps extends RouteComponentProps, WithTranslation { }\r\n\r\nclass StatusTaskModule extends React.Component<StatusTaskModuleProps, IStatusState> {\r\n    readonly localize: TFunction;\r\n    private initMessage = {\r\n        id: \"\",\r\n        title: \"\"\r\n    };\r\n\r\n    private card: any;\r\n\r\n    constructor(props: StatusTaskModuleProps) {\r\n        super(props);\r\n        initializeIcons();\r\n\r\n        this.localize = this.props.t;\r\n\r\n        this.card = getInitAdaptiveCard(this.props.t);\r\n\r\n        this.state = {\r\n            message: this.initMessage,\r\n            loader: true,\r\n            page: \"ViewStatus\",\r\n            teamId: '',\r\n        };\r\n    }\r\n\r\n    public componentDidMount() {\r\n        let params = this.props.match.params;\r\n        microsoftTeams.initialize();\r\n        microsoftTeams.getContext((context) => {\r\n            this.setState({\r\n                teamId: context.teamId,\r\n            });\r\n        });\r\n\r\n        if ('id' in params) {\r\n            let id = params['id'];\r\n            this.getItem(id).then(() => {\r\n                this.setState({\r\n                    loader: false\r\n                }, () => {\r\n                    setCardTitle(this.card, this.state.message.title);\r\n                    setCardImageLink(this.card, this.state.message.imageLink);\r\n                    setCardSummary(this.card, this.state.message.summary);\r\n                    setCardAuthor(this.card, this.state.message.author);\r\n                    if (this.state.message.buttonTitle !== \"\" && this.state.message.buttonLink !== \"\") {\r\n                        setCardBtn(this.card, this.state.message.buttonTitle, this.state.message.buttonLink);\r\n                    }\r\n\r\n                    let adaptiveCard = new AdaptiveCards.AdaptiveCard();\r\n                    adaptiveCard.parse(this.card);\r\n                    let renderedCard = adaptiveCard.render();\r\n                    document.getElementsByClassName('adaptiveCardContainer')[0].appendChild(renderedCard);\r\n                    let link = this.state.message.buttonLink;\r\n                    adaptiveCard.onExecuteAction = function (action) { window.open(link, '_blank'); }\r\n                });\r\n            });\r\n        }\r\n    }\r\n\r\n    private getItem = async (id: number) => {\r\n        try {\r\n            const response = await getSentNotification(id);\r\n            response.data.sendingDuration = formatDuration(response.data.sendingStartedDate, response.data.sentDate);\r\n            response.data.sendingStartedDate = formatDate(response.data.sendingStartedDate);\r\n            response.data.sentDate = formatDate(response.data.sentDate);\r\n            response.data.succeeded = formatNumber(response.data.succeeded);\r\n            response.data.failed = formatNumber(response.data.failed);\r\n            response.data.unknown = response.data.unknown && formatNumber(response.data.unknown);\r\n            this.setState({\r\n                message: response.data\r\n            });\r\n        } catch (error) {\r\n            return error;\r\n        }\r\n    }\r\n\r\n    public render(): JSX.Element {\r\n        if (this.state.loader) {\r\n            return (\r\n                <div className=\"Loader\">\r\n                    <Loader />\r\n                </div>\r\n            );\r\n        } else {\r\n            const downloadIcon: IconProps = { name: 'download', size: \"medium\" };\r\n            if (this.state.page === \"ViewStatus\") {\r\n                return (\r\n                    <div className=\"taskModule\">\r\n                        <div className=\"formContainer\">\r\n                            <div className=\"formContentContainer\" >\r\n                                <div className=\"contentField\">\r\n                                    <h3>{this.localize(\"TitleText\")}</h3>\r\n                                    <span>{this.state.message.title}</span>\r\n                                </div>\r\n                                <div className=\"contentField\">\r\n                                    <h3>{this.localize(\"SendingStarted\")}</h3>\r\n                                    <span>{this.state.message.sendingStartedDate}</span>\r\n                                </div>\r\n                                <div className=\"contentField\">\r\n                                    <h3>{this.localize(\"Completed\")}</h3>\r\n                                    <span>{this.state.message.sentDate}</span>\r\n                                </div>\r\n                                <div className=\"contentField\">\r\n                                    <h3>{this.localize(\"Duration\")}</h3>\r\n                                    <span>{this.state.message.sendingDuration}</span>\r\n                                </div>\r\n                                <div className=\"contentField\">\r\n                                    <h3>{this.localize(\"Results\")}</h3>\r\n                                    <label>{this.localize(\"Success\", { \"SuccessCount\": this.state.message.succeeded })}</label>\r\n                                    <br />\r\n                                    <label>{this.localize(\"Failure\", { \"FailureCount\": this.state.message.failed })}</label>\r\n                                    <br />\r\n                                    {this.state.message.unknown &&\r\n                                        <>\r\n                                        <label>{this.localize(\"Unknown\", { \"UnknownCount\": this.state.message.unknown })}</label>\r\n                                        </>\r\n                                    }\r\n                                </div>\r\n                                <div className=\"contentField\">\r\n                                    {this.renderAudienceSelection()}\r\n                                </div>\r\n                                <div className=\"contentField\">\r\n                                    {this.renderErrorMessage()}\r\n                                </div>\r\n                                <div className=\"contentField\">\r\n                                    {this.renderWarningMessage()}\r\n                                </div>\r\n                            </div>\r\n                            <div className=\"adaptiveCardContainer\">\r\n                            </div>\r\n                        </div>\r\n\r\n                        <div className=\"footerContainer\">\r\n                            <div className={this.state.message.canDownload ? \"\" : \"disabled\"}>\r\n                                <div className=\"buttonContainer\">\r\n                                    <Loader id=\"sendingLoader\" className=\"hiddenLoader sendingLoader\" size=\"smallest\" label={this.localize(\"ExportLabel\")} labelPosition=\"end\" />\r\n                                    <TooltipHost content={!this.state.message.sendingCompleted ? \"\" : (this.state.message.canDownload ? \"\" : this.localize(\"ExportButtonProgressText\"))} calloutProps={{ gapSpace: 0 }}>\r\n                                        <Button icon={downloadIcon} disabled={!this.state.message.canDownload || !this.state.message.sendingCompleted} content={this.localize(\"ExportButtonText\")} id=\"exportBtn\" onClick={this.onExport} primary />\r\n                                    </TooltipHost>\r\n                                </div>\r\n                            </div>\r\n                        </div>\r\n                    </div>\r\n                );\r\n            }\r\n            else if (this.state.page === \"SuccessPage\") {\r\n                return (\r\n                    <div className=\"taskModule\">\r\n                        <div className=\"formContainer\">\r\n                            <div className=\"displayMessageField\">\r\n                                <br />\r\n                                <br />\r\n                                <div><span><Icon className=\"iconStyle\" name=\"stardust-checkmark\" xSpacing=\"before\" size=\"largest\" outline /></span>\r\n                                    <h1>{this.localize(\"ExportQueueTitle\")}</h1></div>\r\n                                <span>{this.localize(\"ExportQueueSuccessMessage1\")}</span>\r\n                                <br />\r\n                                <br />\r\n                                <span>{this.localize(\"ExportQueueSuccessMessage2\")}</span>\r\n                                <br />\r\n                                <span>{this.localize(\"ExportQueueSuccessMessage3\")}</span>\r\n                            </div>\r\n                        </div>\r\n                        <div className=\"footerContainer\">\r\n                            <div className=\"buttonContainer\">\r\n                                <Button content={this.localize(\"CloseText\")} id=\"closeBtn\" onClick={this.onClose} primary />\r\n                            </div>\r\n                        </div>\r\n                    </div>\r\n\r\n                );\r\n            }\r\n            else {\r\n                return (\r\n                    <div className=\"taskModule\">\r\n                        <div className=\"formContainer\">\r\n                            <div className=\"displayMessageField\">\r\n                                <br />\r\n                                <br />\r\n                                <div><span><Icon className=\"iconStyle\" name=\"stardust-close\" xSpacing=\"before\" size=\"largest\" outline /></span>\r\n                                    <h1 className=\"light\">{this.localize(\"ExportErrorTitle\")}</h1></div>\r\n                                <span>{this.localize(\"ExportErrorMessage\")}</span>\r\n                            </div>\r\n                        </div>\r\n                        <div className=\"footerContainer\">\r\n                            <div className=\"buttonContainer\">\r\n                                <Button content={this.localize(\"CloseText\")} id=\"closeBtn\" onClick={this.onClose} primary />\r\n                            </div>\r\n                        </div>\r\n                    </div>\r\n                );\r\n            }\r\n        }\r\n    }\r\n\r\n    private onClose = () => {\r\n        microsoftTeams.tasks.submitTask();\r\n    }\r\n\r\n    private onExport = async () => {\r\n        let spanner = document.getElementsByClassName(\"sendingLoader\");\r\n        spanner[0].classList.remove(\"hiddenLoader\");\r\n        let payload = {\r\n            id: this.state.message.id,\r\n            teamId: this.state.teamId\r\n        };\r\n        await exportNotification(payload).then(() => {\r\n            this.setState({ page: \"SuccessPage\" });\r\n        }).catch(() => {\r\n            this.setState({ page: \"ErrorPage\" });\r\n        });\r\n    }\r\n\r\n    private getItemList = (items: string[]) => {\r\n        let resultedTeams: IListItem[] = [];\r\n        if (items) {\r\n            resultedTeams = items.map((element) => {\r\n                const resultedTeam: IListItem = {\r\n                    header: element,\r\n                    media: <Image src={ImageUtil.makeInitialImage(element)} avatar />\r\n                }\r\n                return resultedTeam;\r\n            });\r\n        }\r\n        return resultedTeams;\r\n    }\r\n    private renderAudienceSelection = () => {\r\n        if (this.state.message.teamNames && this.state.message.teamNames.length > 0) {\r\n            return (\r\n                <div>\r\n                    <h3>{this.localize(\"SentToGeneralChannel\")}</h3>\r\n                    <List items={this.getItemList(this.state.message.teamNames)} />\r\n                </div>);\r\n        } else if (this.state.message.rosterNames && this.state.message.rosterNames.length > 0) {\r\n            return (\r\n                <div>\r\n                    <h3>{this.localize(\"SentToRosters\")}</h3>\r\n                    <List items={this.getItemList(this.state.message.rosterNames)} />\r\n                </div>);\r\n        } else if (this.state.message.groupNames && this.state.message.groupNames.length > 0) {\r\n            return (\r\n                <div>\r\n                    <h3>{this.localize(\"SentToGroups1\")}</h3>\r\n                    <span>{this.localize(\"SentToGroups2\")}</span>\r\n                    <List items={this.getItemList(this.state.message.groupNames)} />\r\n                </div>);\r\n        } else if (this.state.message.allUsers) {\r\n            return (\r\n                <div>\r\n                    <h3>{this.localize(\"SendToAllUsers\")}</h3>\r\n                </div>);\r\n        } else {\r\n            return (<div></div>);\r\n        }\r\n    }\r\n    private renderErrorMessage = () => {\r\n        if (this.state.message.errorMessage) {\r\n            return (\r\n                <div>\r\n                    <h3>{this.localize(\"Errors\")}</h3>\r\n                    <span>{this.state.message.errorMessage}</span>\r\n                </div>\r\n            );\r\n        } else {\r\n            return (<div></div>);\r\n        }\r\n    }\r\n\r\n    private renderWarningMessage = () => {\r\n        if (this.state.message.warningMessage) {\r\n            return (\r\n                <div>\r\n                    <h3>{this.localize(\"Warnings\")}</h3>\r\n                    <span>{this.state.message.warningMessage}</span>\r\n                </div>\r\n            );\r\n        } else {\r\n            return (<div></div>);\r\n        }\r\n    }\r\n}\r\n\r\nconst StatusTaskModuleWithTranslation = withTranslation()(StatusTaskModule);\r\nexport default StatusTaskModuleWithTranslation;","import * as React from 'react';\r\nimport { RouteComponentProps } from 'react-router-dom';\r\nimport { withTranslation, WithTranslation } from \"react-i18next\";\r\nimport * as AdaptiveCards from \"adaptivecards\";\r\nimport { Loader, Button, Text, List, Image } from '@stardust-ui/react';\r\nimport * as microsoftTeams from \"@microsoft/teams-js\";\r\n\r\nimport './sendConfirmationTaskModule.scss';\r\nimport { getDraftNotification, getConsentSummaries, sendDraftNotification } from '../../apis/messageListApi';\r\nimport {\r\n    getInitAdaptiveCard, setCardTitle, setCardImageLink, setCardSummary,\r\n    setCardAuthor, setCardBtn\r\n} from '../AdaptiveCard/adaptiveCard';\r\nimport { ImageUtil } from '../../utility/imageutility';\r\nimport { TFunction } from \"i18next\";\r\n\r\nexport interface IListItem {\r\n    header: string,\r\n    media: JSX.Element,\r\n}\r\n\r\nexport interface IMessage {\r\n    id: string;\r\n    title: string;\r\n    acknowledgements?: number;\r\n    reactions?: number;\r\n    responses?: number;\r\n    succeeded?: number;\r\n    failed?: number;\r\n    throttled?: number;\r\n    sentDate?: string;\r\n    imageLink?: string;\r\n    summary?: string;\r\n    author?: string;\r\n    buttonLink?: string;\r\n    buttonTitle?: string;\r\n}\r\n\r\nexport interface SendConfirmationTaskModuleProps extends RouteComponentProps, WithTranslation {\r\n}\r\n\r\nexport interface IStatusState {\r\n    message: IMessage;\r\n    loader: boolean;\r\n    teamNames: string[];\r\n    rosterNames: string[];\r\n    groupNames: string[];\r\n    allUsers: boolean;\r\n    messageId: number;\r\n}\r\n\r\nclass SendConfirmationTaskModule extends React.Component<SendConfirmationTaskModuleProps, IStatusState> {\r\n    readonly localize: TFunction;\r\n    private initMessage = {\r\n        id: \"\",\r\n        title: \"\"\r\n    };\r\n\r\n    private card: any;\r\n\r\n    constructor(props: SendConfirmationTaskModuleProps) {\r\n        super(props);\r\n        this.localize = this.props.t;\r\n        this.card = getInitAdaptiveCard(this.localize);\r\n\r\n        this.state = {\r\n            message: this.initMessage,\r\n            loader: true,\r\n            teamNames: [],\r\n            rosterNames: [],\r\n            groupNames: [],\r\n            allUsers: false,\r\n            messageId: 0,\r\n        };\r\n    }\r\n\r\n    public componentDidMount() {\r\n        microsoftTeams.initialize();\r\n\r\n        let params = this.props.match.params;\r\n\r\n        if ('id' in params) {\r\n            let id = params['id'];\r\n            this.getItem(id).then(() => {\r\n                getConsentSummaries(id).then((response) => {\r\n                    this.setState({\r\n                        teamNames: response.data.teamNames.sort(),\r\n                        rosterNames: response.data.rosterNames.sort(),\r\n                        groupNames: response.data.groupNames.sort(),\r\n                        allUsers: response.data.allUsers,\r\n                        messageId: id,\r\n                    }, () => {\r\n                        this.setState({\r\n                            loader: false\r\n                        }, () => {\r\n                            setCardTitle(this.card, this.state.message.title);\r\n                            setCardImageLink(this.card, this.state.message.imageLink);\r\n                            setCardSummary(this.card, this.state.message.summary);\r\n                            setCardAuthor(this.card, this.state.message.author);\r\n                            if (this.state.message.buttonTitle && this.state.message.buttonLink) {\r\n                                setCardBtn(this.card, this.state.message.buttonTitle, this.state.message.buttonLink);\r\n                            }\r\n\r\n                            let adaptiveCard = new AdaptiveCards.AdaptiveCard();\r\n                            adaptiveCard.parse(this.card);\r\n                            let renderedCard = adaptiveCard.render();\r\n                            document.getElementsByClassName('adaptiveCardContainer')[0].appendChild(renderedCard);\r\n                            if (this.state.message.buttonLink) {\r\n                                let link = this.state.message.buttonLink;\r\n                                adaptiveCard.onExecuteAction = function (action) { window.open(link, '_blank'); };\r\n                            }\r\n                        });\r\n                    });\r\n                });\r\n            });\r\n        }\r\n    }\r\n\r\n    private getItem = async (id: number) => {\r\n        try {\r\n            const response = await getDraftNotification(id);\r\n            this.setState({\r\n                message: response.data\r\n            });\r\n        } catch (error) {\r\n            return error;\r\n        }\r\n    }\r\n\r\n    public render(): JSX.Element {\r\n        if (this.state.loader) {\r\n            return (\r\n                <div className=\"Loader\">\r\n                    <Loader />\r\n                </div>\r\n            );\r\n        } else {\r\n            return (\r\n                <div className=\"taskModule\">\r\n                    <div className=\"formContainer\">\r\n                        <div className=\"formContentContainer\" >\r\n                            <div className=\"contentField\">\r\n                                <h3>{this.localize(\"ConfirmToSend\")}</h3>\r\n                                <span>{this.localize(\"SendToRecipientsLabel\")}</span>\r\n                            </div>\r\n\r\n                            <div className=\"results\">\r\n                                {this.renderAudienceSelection()}\r\n                            </div>\r\n                        </div>\r\n                        <div className=\"adaptiveCardContainer\">\r\n                        </div>\r\n                    </div>\r\n\r\n                    <div className=\"footerContainer\">\r\n                        <div className=\"buttonContainer\">\r\n                            <Loader id=\"sendingLoader\" className=\"hiddenLoader sendingLoader\" size=\"smallest\" label={this.localize(\"PreparingMessageLabel\")} labelPosition=\"end\" />\r\n                            <Button content={this.localize(\"Send\")} id=\"sendBtn\" onClick={this.onSendMessage} primary />\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n            );\r\n        }\r\n    }\r\n\r\n    private onSendMessage = () => {\r\n        let spanner = document.getElementsByClassName(\"sendingLoader\");\r\n        spanner[0].classList.remove(\"hiddenLoader\");\r\n        sendDraftNotification(this.state.message).then(() => {\r\n            microsoftTeams.tasks.submitTask();\r\n        });\r\n    }\r\n\r\n    private getItemList = (items: string[]) => {\r\n        let resultedTeams: IListItem[] = [];\r\n        if (items) {\r\n            resultedTeams = items.map((element) => {\r\n                const resultedTeam: IListItem = {\r\n                    header: element,\r\n                    media: <Image src={ImageUtil.makeInitialImage(element)} avatar />\r\n                }\r\n                return resultedTeam;\r\n            });\r\n        }\r\n        return resultedTeams;\r\n    }\r\n\r\n    private renderAudienceSelection = () => {\r\n        if (this.state.teamNames && this.state.teamNames.length > 0) {\r\n            return (\r\n                <div key=\"teamNames\"> <span className=\"label\">{this.localize(\"TeamsLabel\")}</span>\r\n                    <List items={this.getItemList(this.state.teamNames)} />\r\n                </div>\r\n            );\r\n        } else if (this.state.rosterNames && this.state.rosterNames.length > 0) {\r\n            return (\r\n                <div key=\"rosterNames\"> <span className=\"label\">{this.localize(\"TeamsMembersLabel\")}</span>\r\n                    <List items={this.getItemList(this.state.rosterNames)} />\r\n                </div>);\r\n        } else if (this.state.groupNames && this.state.groupNames.length > 0) {\r\n            return (\r\n                <div key=\"groupNames\" > <span className=\"label\">{this.localize(\"GroupsMembersLabel\")}</span>\r\n                    <List items={this.getItemList(this.state.groupNames)} />\r\n                </div>);\r\n        } else if (this.state.allUsers) {\r\n            return (\r\n                <div key=\"allUsers\">\r\n                    <span className=\"label\">{this.localize(\"AllUsersLabel\")}</span>\r\n                    <div className=\"noteText\">\r\n                        <Text error content={this.localize(\"SendToAllUsersNote\")} />\r\n                    </div>\r\n                </div>);\r\n        } else {\r\n            return (<div></div>);\r\n        }\r\n    }\r\n}\r\n\r\nconst sendConfirmationTaskModuleWithTranslation = withTranslation()(SendConfirmationTaskModule);\r\nexport default sendConfirmationTaskModuleWithTranslation;","import React from 'react';\r\nimport { RouteComponentProps } from 'react-router-dom';\r\nimport { useTranslation } from 'react-i18next';\r\nimport { Text } from '@stardust-ui/react';\r\nimport './errorPage.scss';\r\n\r\nconst ErrorPage: React.FunctionComponent<RouteComponentProps> = props => {\r\n    const { t } = useTranslation();\r\n\r\n    function parseErrorMessage(): string {\r\n        const params = props.match.params;\r\n        if ('id' in params) {\r\n            const id = params['id'];\r\n            if (id === \"401\") {\r\n                return t(\"UnauthorizedErrorMessage\");\r\n            } else if (id === \"403\") {\r\n                return t(\"ForbiddenErrorMessage\");\r\n            }\r\n        }\r\n        return t(\"GeneralErrorMessage\");\r\n    }\r\n\r\n    return (\r\n        <Text content={parseErrorMessage()} className=\"error-message\" error size=\"medium\" />\r\n    );\r\n};\r\n\r\nexport default ErrorPage;","import React from \"react\";\r\nimport { RouteComponentProps } from \"react-router-dom\";\r\nimport { useTranslation } from 'react-i18next';\r\nimport { Text, Button } from \"@stardust-ui/react\";\r\nimport * as microsoftTeams from \"@microsoft/teams-js\";\r\nimport \"./signInPage.scss\";\r\nimport i18n from \"../../i18n\";\r\n\r\nconst SignInPage: React.FunctionComponent<RouteComponentProps> = props => {\r\n  const { t } = useTranslation();\r\n  const errorMessage = t(\"SignInPromptMessage\");\r\n\r\n  function onSignIn() {\r\n    microsoftTeams.authentication.authenticate({\r\n      url: window.location.origin + \"/signin-simple-start\",\r\n      successCallback: () => {\r\n        console.log(\"Login succeeded!\");\r\n        window.location.href = \"/messages\";\r\n      },\r\n      failureCallback: (reason) => {\r\n        console.log(\"Login failed: \" + reason);\r\n        window.location.href = `/errorpage?locale=${i18n.language}`;\r\n      }\r\n    });\r\n  }\r\n\r\n  return (\r\n    <div className=\"sign-in-content-container\">\r\n      <Text\r\n        content={errorMessage}\r\n        size=\"medium\"\r\n      />\r\n      <div className=\"space\"></div>\r\n      <Button content={t(\"SignIn\")} primary className=\"sign-in-button\" onClick={onSignIn} />\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default SignInPage;\r\n","import React, { useEffect } from \"react\";\r\nimport * as microsoftTeams from \"@microsoft/teams-js\";\r\nimport { getAuthenticationConsentMetadata } from '../../apis/messageListApi';\r\n\r\nconst SignInSimpleStart: React.FunctionComponent = () => {\r\n    useEffect(() => {\r\n        microsoftTeams.initialize();\r\n\r\n        microsoftTeams.getContext(context => {\r\n            const windowLocationOriginDomain = window.location.origin.replace(\"https://\", \"\");\r\n            const login_hint = context.upn ? context.upn : \"\";\r\n\r\n            getAuthenticationConsentMetadata(windowLocationOriginDomain, login_hint).then(result => {\r\n                window.location.assign(result.data);\r\n            });\r\n        });\r\n    });\r\n\r\n    return (\r\n        <></>\r\n    );\r\n};\r\n\r\nexport default SignInSimpleStart;","import React, { useEffect } from \"react\";\r\nimport * as microsoftTeams from \"@microsoft/teams-js\";\r\n\r\nconst SignInSimpleEnd: React.FunctionComponent = () => {\r\n    // Parse hash parameters into key-value pairs\r\n    function getHashParameters() {\r\n        const hashParams: any = {};\r\n        window.location.hash.substr(1).split(\"&\").forEach(function (item) {\r\n            let s = item.split(\"=\"),\r\n                k = s[0],\r\n                v = s[1] && decodeURIComponent(s[1]);\r\n            hashParams[k] = v;\r\n        });\r\n        return hashParams;\r\n    }\r\n\r\n    useEffect(() => {\r\n        microsoftTeams.initialize();\r\n\r\n        const hashParams: any = getHashParameters();\r\n        if (hashParams[\"error\"]) {\r\n            // Authentication/authorization failed\r\n            microsoftTeams.authentication.notifyFailure(hashParams[\"error\"]);\r\n        } else if (hashParams[\"id_token\"]) {\r\n            // Success\r\n            microsoftTeams.authentication.notifySuccess();\r\n        } else {\r\n            // Unexpected condition: hash does not contain error or access_token parameter\r\n            microsoftTeams.authentication.notifyFailure(\"UnexpectedFailure\");\r\n        }\r\n    });\r\n\r\n    return (\r\n        <></>\r\n    );\r\n};\r\n\r\nexport default SignInSimpleEnd;","import React, { Suspense } from 'react';\r\nimport { BrowserRouter, Route, Switch } from 'react-router-dom';\r\nimport Configuration from './components/config';\r\nimport TabContainer from './components/TabContainer/tabContainer';\r\nimport NewMessage from './components/NewMessage/newMessage';\r\nimport StatusTaskModule from './components/StatusTaskModule/statusTaskModule';\r\nimport './App.scss';\r\nimport { Provider, themes } from '@stardust-ui/react';\r\nimport SendConfirmationTaskModule from './components/SendConfirmationTaskModule/sendConfirmationTaskModule';\r\nimport * as microsoftTeams from \"@microsoft/teams-js\";\r\nimport { TeamsThemeContext, getContext, ThemeStyle } from 'msteams-ui-components-react';\r\nimport ErrorPage from \"./components/ErrorPage/errorPage\";\r\nimport SignInPage from \"./components/SignInPage/signInPage\";\r\nimport SignInSimpleStart from \"./components/SignInPage/signInSimpleStart\";\r\nimport SignInSimpleEnd from \"./components/SignInPage/signInSimpleEnd\";\r\nimport { updateLocale } from './i18n';\r\n\r\nexport interface IAppState {\r\n  theme: string;\r\n  themeStyle: number;\r\n}\r\n\r\nclass App extends React.Component<{}, IAppState> {\r\n\r\n  constructor(props: {}) {\r\n    super(props);\r\n    this.state = {\r\n      theme: \"\",\r\n      themeStyle: ThemeStyle.Light,\r\n    }\r\n  }\r\n\r\n  public componentDidMount() {\r\n    microsoftTeams.initialize();\r\n    microsoftTeams.getContext((context) => {\r\n      let theme = context.theme || \"\";\r\n      this.updateTheme(theme);\r\n      this.setState({\r\n        theme: theme\r\n      });\r\n    });\r\n\r\n    microsoftTeams.registerOnThemeChangeHandler((theme) => {\r\n          this.updateTheme(theme);\r\n          this.setState({\r\n            theme: theme,\r\n          }, () => {\r\n            this.forceUpdate();\r\n          });\r\n    });\r\n\r\n    updateLocale();\r\n  }\r\n\r\n  public setThemeComponent = () => {\r\n    if (this.state.theme === \"dark\") {\r\n      return (\r\n        <Provider theme={themes.teamsDark}>\r\n          <div className=\"darkContainer\">\r\n            {this.getAppDom()}\r\n          </div>\r\n        </Provider>\r\n      );\r\n    }\r\n    else if (this.state.theme === \"contrast\") {\r\n      return (\r\n        <Provider theme={themes.teamsHighContrast}>\r\n          <div className=\"highContrastContainer\">\r\n            {this.getAppDom()}\r\n          </div>\r\n        </Provider>\r\n      );\r\n    } else {\r\n      return (\r\n        <Provider theme={themes.teams}>\r\n          <div className=\"defaultContainer\">\r\n            {this.getAppDom()}\r\n          </div>\r\n        </Provider>\r\n      );\r\n    }\r\n  }\r\n\r\n  private updateTheme = (theme: string) => {\r\n    if (theme === \"dark\") {\r\n      this.setState({\r\n        themeStyle: ThemeStyle.Dark\r\n      });\r\n    } else if (theme === \"contrast\") {\r\n      this.setState({\r\n        themeStyle: ThemeStyle.HighContrast\r\n      });\r\n    } else {\r\n      this.setState({\r\n        themeStyle: ThemeStyle.Light\r\n      });\r\n    }\r\n  }\r\n\r\n  public getAppDom = () => {\r\n    const context = getContext({\r\n      baseFontSize: 10,\r\n      style: this.state.themeStyle\r\n    });\r\n    return (\r\n      <TeamsThemeContext.Provider value={context}>\r\n        <Suspense fallback={<div></div>}>\r\n          <div className=\"appContainer\">\r\n            <BrowserRouter>\r\n              <Switch>\r\n                <Route exact path=\"/configtab\" component={Configuration} />\r\n                <Route exact path=\"/messages\" component={TabContainer} />\r\n                <Route exact path=\"/newmessage\" component={NewMessage} />\r\n                <Route exact path=\"/newmessage/:id\" component={NewMessage} />\r\n                <Route exact path=\"/viewstatus/:id\" component={StatusTaskModule} />\r\n                <Route exact path=\"/sendconfirmation/:id\" component={SendConfirmationTaskModule} />\r\n                <Route exact path=\"/errorpage\" component={ErrorPage} />\r\n                <Route exact path=\"/errorpage/:id\" component={ErrorPage} />\r\n                <Route exact path=\"/signin\" component={SignInPage} />\r\n                <Route exact path=\"/signin-simple-start\" component={SignInSimpleStart} />\r\n                <Route exact path=\"/signin-simple-end\" component={SignInSimpleEnd} />\r\n              </Switch>\r\n            </BrowserRouter>\r\n          </div>\r\n        </Suspense>\r\n      </TeamsThemeContext.Provider>\r\n    );\r\n  }\r\n\r\n  public render(): JSX.Element {\r\n    return (\r\n      <div>\r\n        {this.setThemeComponent()}\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default App;","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.1/8 is considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\ntype Config = {\r\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\r\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\r\n};\r\n\r\nexport function register(config?: Config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(\r\n      (process as { env: { [key: string]: string } }).env.PUBLIC_URL,\r\n      window.location.href\r\n    );\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl: string, config?: Config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl)\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import { combineReducers } from \"redux\";\r\n\r\nexport const selectedMessageReducer = (selectedMessage = null, action: { type: string; payload: any; }) => {\r\n    if (action.type === 'MESSAGE_SELECTED') {\r\n        return action.payload;\r\n    }\r\n    return selectedMessage;\r\n}\r\n\r\nexport const messagesListReducer = (messages = [], action: { type: string; payload: any; }) => {\r\n    if (action.type === 'FETCH_MESSAGES') {\r\n        return action.payload\r\n    }\r\n    return messages;\r\n};\r\n\r\nexport const draftmessagesListReducer = (draftMessages = [], action: { type: string; payload: any; }) => {\r\n    if (action.type === 'FETCH_DRAFTMESSAGES') {\r\n        return action.payload\r\n    }\r\n    return draftMessages;\r\n};\r\n\r\nexport default combineReducers({\r\n    messagesList: messagesListReducer,\r\n    draftMessagesList: draftmessagesListReducer,\r\n    selectedMessage: selectedMessageReducer,\r\n});","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.scss';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\nimport { Provider } from 'react-redux';\r\nimport { createStore, applyMiddleware } from 'redux';\r\nimport reducers from './reducers';\r\nimport thunk from 'redux-thunk';\r\n\r\nconst store = createStore(reducers, applyMiddleware(thunk));\r\n\r\nReactDOM.render(\r\n    <Provider store={store}>\r\n        <App />\r\n    </Provider>,\r\n    document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}